{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About This Site This site was built with the objective of providing information and at the same time as a reference for me to look back incase I need this again. A lot of time is usually spent in just searching for solutions. To avoid waste of time in the future I have written this blog on my own with information I have gathered myself or referred through different websites and videos. About The Author Hello I am Anjan Nair. I spend some of my time writing code or messing around with software. Currently pursuing Bachelor's of Technology from Atharva College of Engineering in Mumbai. If I am not coding or \"studying\" you'll find me binging shows and movies.","title":"Anjan Nair's Blog"},{"location":"#about-this-site","text":"This site was built with the objective of providing information and at the same time as a reference for me to look back incase I need this again. A lot of time is usually spent in just searching for solutions. To avoid waste of time in the future I have written this blog on my own with information I have gathered myself or referred through different websites and videos.","title":"About This Site"},{"location":"#about-the-author","text":"Hello I am Anjan Nair. I spend some of my time writing code or messing around with software. Currently pursuing Bachelor's of Technology from Atharva College of Engineering in Mumbai. If I am not coding or \"studying\" you'll find me binging shows and movies.","title":"About The Author"},{"location":"Android/adb-on-android/","text":"Android Debug Bridge Android Debug Bridge also known as ADB is used by developers to debug their applications on Android. This with a little tack of handling a terminal line is all what is required to improvise your experience on Android. To address the fear of losing data on Android: your data would be safe there is literally nothing to worry while using this if you stick to the instructions. In this article you would not find steps but instead you will find links to trustworthy articles that have already plenty of information with steps. Installing ADB You can easily install ADB on Linux, Windows and MacOS. This article covers the whole installation process for all the OSes. De-bloating Android Most of the Android device manufacturers pre-install a lot of apps which are unnecessary to most of the users. Many of the pre-installed apps cannot uninstalled by default. For example Facebook and Netflix on Samsung cannot be uninstalled. Here is when ADB comes into the picture. Using ADB you can remove these apps. However if you reset your device or get a major update on your device these apps get installed once again. Once again you can use ADB to remove these apps again. This article covers the steps to get rid of bloatware from your Android. Caution - Do not uninstall everything you like without researching well. For example on Samsung if you uninstall an important software then your phone may not end up booting up too! Research well before uninstalling any system bloatware on Google. There will be many forums answering your doubts. If you however uninstall any component by mistake you can install it again by using the CLI. Customizing Airplane Mode Ever noticed that when you enable airplane mode on your Android it disables your wifi, bluetooth etc. I personally find it very irritating as I prefer using airplane mode just to disable mobile network. To disable only mobile networks when airplane mode is enabled, refer to the following article Final Thoughts ADB is very useful if you are not afraid to take a dive into the terminal world. The learning curve for this isn't steep and can easily be configured if you just follow the instructions in the articles. Enjoy an improvised Android!","title":"Android Debug Bridge"},{"location":"Android/adb-on-android/#android-debug-bridge","text":"Android Debug Bridge also known as ADB is used by developers to debug their applications on Android. This with a little tack of handling a terminal line is all what is required to improvise your experience on Android. To address the fear of losing data on Android: your data would be safe there is literally nothing to worry while using this if you stick to the instructions. In this article you would not find steps but instead you will find links to trustworthy articles that have already plenty of information with steps.","title":"Android Debug Bridge"},{"location":"Android/adb-on-android/#installing-adb","text":"You can easily install ADB on Linux, Windows and MacOS. This article covers the whole installation process for all the OSes.","title":"Installing ADB"},{"location":"Android/adb-on-android/#de-bloating-android","text":"Most of the Android device manufacturers pre-install a lot of apps which are unnecessary to most of the users. Many of the pre-installed apps cannot uninstalled by default. For example Facebook and Netflix on Samsung cannot be uninstalled. Here is when ADB comes into the picture. Using ADB you can remove these apps. However if you reset your device or get a major update on your device these apps get installed once again. Once again you can use ADB to remove these apps again. This article covers the steps to get rid of bloatware from your Android. Caution - Do not uninstall everything you like without researching well. For example on Samsung if you uninstall an important software then your phone may not end up booting up too! Research well before uninstalling any system bloatware on Google. There will be many forums answering your doubts. If you however uninstall any component by mistake you can install it again by using the CLI.","title":"De-bloating Android"},{"location":"Android/adb-on-android/#customizing-airplane-mode","text":"Ever noticed that when you enable airplane mode on your Android it disables your wifi, bluetooth etc. I personally find it very irritating as I prefer using airplane mode just to disable mobile network. To disable only mobile networks when airplane mode is enabled, refer to the following article","title":"Customizing Airplane Mode"},{"location":"Android/adb-on-android/#final-thoughts","text":"ADB is very useful if you are not afraid to take a dive into the terminal world. The learning curve for this isn't steep and can easily be configured if you just follow the instructions in the articles. Enjoy an improvised Android!","title":"Final Thoughts"},{"location":"Android/private-dns/","text":"Private DNS on Android Private DNS is one of the least known settings in Android, well at least to the non-tech savvy users. Private DNS can be found in all Android phones which have an Android version of 9+. Although in a lot of phones which have Android version 9, this feature is missing. Your Android version can be found if you navigate to Settings and simply tap on the About section. All details of your phone are available there. Why Private DNS? A lot of DNS providers provide an option of blocking ads using DNS. Ads getting blocked will also lead to an increase in faster speeds. Private DNS is also used to switch from the default DNS provider (which is mostly Google) to a non-Google DNS provider say for example CloudFare. Getting Started In this run through we are going to look at 2 ad-blocking DNS providers preferred by me - NextDNS and AdGuard . My personal favorite is NextDNS because it offer a wide range of ad blocking including customizing what you want to block. It even includes an allowlist in which you can add sites you don't wish to be blocked. AdGuard Let's look at one of the most simple setups for an ad-blocking DNS - Navigate to Android Settings and use the search bar in your phone and search up Private DNS . If you do not find the setting, your phone does not support it, but you have an option of running an AdGuard VPN (Virtual Private Network) to block ads. Once you find Private DNS click on it and set the options shown on it to Manual . In the input field input the following without anything extra dns.adguard.com . That's it you're done! You can test your ad blocker DNS by visiting a news site and watching all those pesky ads get blocked! NextDNS Before setting up NextDNS one should know that this requires you having an account. Although a very simple bypass to this is simply using a temporary mail provider or just inputting a very random email while registering. NextDNS does not confirm nor checks if the email is real. Let's look at the setup for NextDNS - Head over to the signup page and enter your details. Once you do that you will be redirected to a Setup tab. Scroll down to the Endpoints category and find for the DNS-over-TLS/QUIC option and copy the code below that. Open your Android phone settings, use the search bar in your phone and search up Private DNS . If you do not find the setting, your phone does not support it, but you have an option of running an NextDNS VPN (Virtual Private Network) to block ads. Once you find Private DNS click on it and set the options shown on it to Manual . In the input field input the code you copied over from NextDNS. You have now successfully setup NextDNS! NextDNS Additional Setup NextDNS offers a wide range of customizations not limited to blocking just ads. It's free plan is just more than enough for a regular user. Here are some features - Security - This tab is present right next to the Setup tab and can be used to setup all the extra security you may require. All the options are very self explanatory and do not require additional explanation. Privacy - This tab has a great feature known as Blocklists , you can add and customize which filters you would like having. I personally recommend the AdGuard DNS filter and the Steven Black filters as they are quite extensive and kept updated. A critical filter you would see is a Spotify Adblock filter, personally that filter has never worked for me on Android, instead it has ended up causing problems when updating apps from the Google Play Store. Right below Blocklists is another great feature called Native Tracking Protection which can be used to block trackers operating at system level ( sigh Windows for example has a lot of telemetry so this option effectively block them if you configure NextDNS for Windows). Settings - The last tab here has an important option for you to choose: Enable logs or disable them. Logs can be used effectively to know what causes issues. For example you visit a site and it breaks due to NextDNS, you can head over to the logs and see what caused it to break hence fixing the issue or reporting it. If you enable logs NextDNS gives you two options: Retention and Storage Location. The first option is pretty self explanatory, for the second option go with Switzerland as this country has the best data privacy laws. Final Thoughts NextDNS obviously has a better advantage when compared to AdGuard and personally prefer NextDNS over AdGuard. Other players such as CloudFare (does not offer adblock) also can be setup in a similar way. NextDNS AdGuard Blocklists Easily customizable Stick to company decided lists Setup Can be difficult for a non-tech person to setup Easy to setup Logs Logs are collected but can be switched off Logs are on by default and cannot be switched off Account Requirement Registering an account is compulsory No account setup necessary Uptime No inbuilt uptime checker however a third party uptime checker has given a 99.6% 99.95% uptime as provided by AdGuard themselves","title":"Private DNS for Android"},{"location":"Android/private-dns/#private-dns-on-android","text":"Private DNS is one of the least known settings in Android, well at least to the non-tech savvy users. Private DNS can be found in all Android phones which have an Android version of 9+. Although in a lot of phones which have Android version 9, this feature is missing. Your Android version can be found if you navigate to Settings and simply tap on the About section. All details of your phone are available there.","title":"Private DNS on Android"},{"location":"Android/private-dns/#why-private-dns","text":"A lot of DNS providers provide an option of blocking ads using DNS. Ads getting blocked will also lead to an increase in faster speeds. Private DNS is also used to switch from the default DNS provider (which is mostly Google) to a non-Google DNS provider say for example CloudFare.","title":"Why Private DNS?"},{"location":"Android/private-dns/#getting-started","text":"In this run through we are going to look at 2 ad-blocking DNS providers preferred by me - NextDNS and AdGuard . My personal favorite is NextDNS because it offer a wide range of ad blocking including customizing what you want to block. It even includes an allowlist in which you can add sites you don't wish to be blocked.","title":"Getting Started"},{"location":"Android/private-dns/#adguard","text":"Let's look at one of the most simple setups for an ad-blocking DNS - Navigate to Android Settings and use the search bar in your phone and search up Private DNS . If you do not find the setting, your phone does not support it, but you have an option of running an AdGuard VPN (Virtual Private Network) to block ads. Once you find Private DNS click on it and set the options shown on it to Manual . In the input field input the following without anything extra dns.adguard.com . That's it you're done! You can test your ad blocker DNS by visiting a news site and watching all those pesky ads get blocked!","title":"AdGuard"},{"location":"Android/private-dns/#nextdns","text":"Before setting up NextDNS one should know that this requires you having an account. Although a very simple bypass to this is simply using a temporary mail provider or just inputting a very random email while registering. NextDNS does not confirm nor checks if the email is real. Let's look at the setup for NextDNS - Head over to the signup page and enter your details. Once you do that you will be redirected to a Setup tab. Scroll down to the Endpoints category and find for the DNS-over-TLS/QUIC option and copy the code below that. Open your Android phone settings, use the search bar in your phone and search up Private DNS . If you do not find the setting, your phone does not support it, but you have an option of running an NextDNS VPN (Virtual Private Network) to block ads. Once you find Private DNS click on it and set the options shown on it to Manual . In the input field input the code you copied over from NextDNS. You have now successfully setup NextDNS!","title":"NextDNS"},{"location":"Android/private-dns/#nextdns-additional-setup","text":"NextDNS offers a wide range of customizations not limited to blocking just ads. It's free plan is just more than enough for a regular user. Here are some features - Security - This tab is present right next to the Setup tab and can be used to setup all the extra security you may require. All the options are very self explanatory and do not require additional explanation. Privacy - This tab has a great feature known as Blocklists , you can add and customize which filters you would like having. I personally recommend the AdGuard DNS filter and the Steven Black filters as they are quite extensive and kept updated. A critical filter you would see is a Spotify Adblock filter, personally that filter has never worked for me on Android, instead it has ended up causing problems when updating apps from the Google Play Store. Right below Blocklists is another great feature called Native Tracking Protection which can be used to block trackers operating at system level ( sigh Windows for example has a lot of telemetry so this option effectively block them if you configure NextDNS for Windows). Settings - The last tab here has an important option for you to choose: Enable logs or disable them. Logs can be used effectively to know what causes issues. For example you visit a site and it breaks due to NextDNS, you can head over to the logs and see what caused it to break hence fixing the issue or reporting it. If you enable logs NextDNS gives you two options: Retention and Storage Location. The first option is pretty self explanatory, for the second option go with Switzerland as this country has the best data privacy laws.","title":"NextDNS Additional Setup"},{"location":"Android/private-dns/#final-thoughts","text":"NextDNS obviously has a better advantage when compared to AdGuard and personally prefer NextDNS over AdGuard. Other players such as CloudFare (does not offer adblock) also can be setup in a similar way. NextDNS AdGuard Blocklists Easily customizable Stick to company decided lists Setup Can be difficult for a non-tech person to setup Easy to setup Logs Logs are collected but can be switched off Logs are on by default and cannot be switched off Account Requirement Registering an account is compulsory No account setup necessary Uptime No inbuilt uptime checker however a third party uptime checker has given a 99.6% 99.95% uptime as provided by AdGuard themselves","title":"Final Thoughts"},{"location":"DevOps/Docker/","text":"Docker Docker has been quite useful in developing and scaling applications in containers. It isolates the app from the infrastructure. A container is a running instance of an image. Getting Started To install Docker there are a ton of methods you can find here . You can select your OS and then follow the instructions to install. Commands Some commands that you can find useful - 1) To test your Docker - docker run hello-word 2) To pull and image from Docker - docker pull debian 3) To run the image using interactive mode - docker run -t debian This command spins up a container with a unique id 4) To check all the containers - docker ps The above command is to get all the running containers. To get all containers dead and running you should - docker ps -a 5) To delete a container we use - docker rm <container id> 6) To get all images on your PC - docker images 7) To delete an image we use - docker rmi <image id> 8) To run a dead container in interactive mode - docker start -i <docker id> 9) Creating a custom image from a container - docker commit -m \"my message\" <container ID> <name of image> Dockerfile The Dockerfile is written to build a custom image. It consists of commands to build the image. A quick example of a Dockerfile for node is - Docker 1 2 3 4 5 6 FROM node WORKDIR /app COPY package.json /app RUN npm install COPY . /app CMD [ \"npm\" , \"start\" ] After adding the Dockerfile to the root of your directory just use the command - Bash 1 docker build -t mycustomtag . Why tags are important? They provide unique names assigned by the user to identify the custom images. Playing around The custom image built can now be run in the interactive mode using the following command - Bash 1 docker run -it -p 3000 :3000 mycustomtag To run the custom image in detached mode we will use the following command - Bash 1 docker run -d -p 3000 :3000 mycustomtag Detached mode means without a prompt or verbose The 3000:3000 means exposing the docker containers internal port to the external port Untested A resource I found on YouTube states that one can use the automatic server restart in nodemon with Docker. I haven't tried it yet but it looks like a good idea! Link to video - Docker-izing a NodeJS ExpressJS API","title":"Docker - Getting Started"},{"location":"DevOps/Docker/#docker","text":"Docker has been quite useful in developing and scaling applications in containers. It isolates the app from the infrastructure. A container is a running instance of an image.","title":"Docker"},{"location":"DevOps/Docker/#getting-started","text":"To install Docker there are a ton of methods you can find here . You can select your OS and then follow the instructions to install.","title":"Getting Started"},{"location":"DevOps/Docker/#commands","text":"Some commands that you can find useful - 1) To test your Docker - docker run hello-word 2) To pull and image from Docker - docker pull debian 3) To run the image using interactive mode - docker run -t debian This command spins up a container with a unique id 4) To check all the containers - docker ps The above command is to get all the running containers. To get all containers dead and running you should - docker ps -a 5) To delete a container we use - docker rm <container id> 6) To get all images on your PC - docker images 7) To delete an image we use - docker rmi <image id> 8) To run a dead container in interactive mode - docker start -i <docker id> 9) Creating a custom image from a container - docker commit -m \"my message\" <container ID> <name of image>","title":"Commands"},{"location":"DevOps/Docker/#dockerfile","text":"The Dockerfile is written to build a custom image. It consists of commands to build the image. A quick example of a Dockerfile for node is - Docker 1 2 3 4 5 6 FROM node WORKDIR /app COPY package.json /app RUN npm install COPY . /app CMD [ \"npm\" , \"start\" ] After adding the Dockerfile to the root of your directory just use the command - Bash 1 docker build -t mycustomtag .","title":"Dockerfile"},{"location":"DevOps/Docker/#why-tags-are-important","text":"They provide unique names assigned by the user to identify the custom images.","title":"Why tags are important?"},{"location":"DevOps/Docker/#playing-around","text":"The custom image built can now be run in the interactive mode using the following command - Bash 1 docker run -it -p 3000 :3000 mycustomtag To run the custom image in detached mode we will use the following command - Bash 1 docker run -d -p 3000 :3000 mycustomtag Detached mode means without a prompt or verbose The 3000:3000 means exposing the docker containers internal port to the external port","title":"Playing around"},{"location":"DevOps/Docker/#untested","text":"A resource I found on YouTube states that one can use the automatic server restart in nodemon with Docker. I haven't tried it yet but it looks like a good idea! Link to video - Docker-izing a NodeJS ExpressJS API","title":"Untested"},{"location":"Hardware/Microcontroller/Raspberry%20Pi%20Pico/Pico%20Ducky/","text":"Pico Ducky aka Bad USB A Pico Ducky is a USB Rubber Ducky. As defined on the internet as - \"USB Rubber ducky is an HID device that looks similar to a USB Pen drive. It may be used to inject keystroke into a system, used to hack a system, steal victims essential and credential data can inject payload to the victim's computers.\" Getting Started If you want to skip to the Github Repository here is the link. Download the .uf2 file from CircuitPython for the Raspberry Pi Pico Plug the device into a USB port while holding the boot button. It will show up as a removable media device named RPI-RP2 . Copy the downloaded .uf2 file to the root of the Pico ( RPI-RP2 ). The device will reboot and after a second or so, it will reconnect as CIRCUITPY . Download adafruit-circuitpython-bundle-7.x-mpy-YYYYMMDD.zip from here and extract it on your main device (not the Pico). Navigate to lib in the recently extracted folder and copy adafruit_hid to the lib folder in your Raspberry Pi Pico. Click here , press CTRL + S and save the file as code.py in the root of the Raspberry Pi Pico, overwriting the previous file. Before the next step, let us enter setup mode. To enter setup mode by connecting the pin 1 ( GP0 ) to pin 3 ( GND ), this will stop the pico-ducky from injecting the payload in your own machine. The easiest way to so is by using a jumper wire between those pins as seen bellow. Find a script here or create your own one using Ducky Script and save it as payload.dd in the Pico. Be careful, if your device isn't in setup mode , the device will reboot and after half a second, the script will run. Enable Disable Mode If you need the pico-ducky to not show up as a USB mass storage device for stealth, follow these instructions. 1. Enter setup mode. 2. Copy boot.py to the root of the pico-ducky. 3. Copy your payload script to the pico-ducky. 4. Disconnect the pico from your host PC. 5. Connect a jumper wire between pin 18 ( GND ) and pin 20 ( GPIO15 ). 6. This will prevent the pico-ducky from showing up as a USB drive when plugged into the target computer. 7. Remove the jumper and reconnect to your PC to reprogram. 8. The default mode is USB mass storage enabled.","title":"Ducky on Raspberry Pi Pico"},{"location":"Hardware/Microcontroller/Raspberry%20Pi%20Pico/Pico%20Ducky/#pico-ducky-aka-bad-usb","text":"A Pico Ducky is a USB Rubber Ducky. As defined on the internet as - \"USB Rubber ducky is an HID device that looks similar to a USB Pen drive. It may be used to inject keystroke into a system, used to hack a system, steal victims essential and credential data can inject payload to the victim's computers.\"","title":"Pico Ducky aka Bad USB"},{"location":"Hardware/Microcontroller/Raspberry%20Pi%20Pico/Pico%20Ducky/#getting-started","text":"If you want to skip to the Github Repository here is the link. Download the .uf2 file from CircuitPython for the Raspberry Pi Pico Plug the device into a USB port while holding the boot button. It will show up as a removable media device named RPI-RP2 . Copy the downloaded .uf2 file to the root of the Pico ( RPI-RP2 ). The device will reboot and after a second or so, it will reconnect as CIRCUITPY . Download adafruit-circuitpython-bundle-7.x-mpy-YYYYMMDD.zip from here and extract it on your main device (not the Pico). Navigate to lib in the recently extracted folder and copy adafruit_hid to the lib folder in your Raspberry Pi Pico. Click here , press CTRL + S and save the file as code.py in the root of the Raspberry Pi Pico, overwriting the previous file. Before the next step, let us enter setup mode. To enter setup mode by connecting the pin 1 ( GP0 ) to pin 3 ( GND ), this will stop the pico-ducky from injecting the payload in your own machine. The easiest way to so is by using a jumper wire between those pins as seen bellow. Find a script here or create your own one using Ducky Script and save it as payload.dd in the Pico. Be careful, if your device isn't in setup mode , the device will reboot and after half a second, the script will run.","title":"Getting Started"},{"location":"Hardware/Microcontroller/Raspberry%20Pi%20Pico/Pico%20Ducky/#enable-disable-mode","text":"If you need the pico-ducky to not show up as a USB mass storage device for stealth, follow these instructions. 1. Enter setup mode. 2. Copy boot.py to the root of the pico-ducky. 3. Copy your payload script to the pico-ducky. 4. Disconnect the pico from your host PC. 5. Connect a jumper wire between pin 18 ( GND ) and pin 20 ( GPIO15 ). 6. This will prevent the pico-ducky from showing up as a USB drive when plugged into the target computer. 7. Remove the jumper and reconnect to your PC to reprogram. 8. The default mode is USB mass storage enabled.","title":"Enable Disable Mode"},{"location":"Hardware/Microprocessor/Raspberry%20Pi%203/Nginx-Reverse-Proxy/","text":"Nginx Reverse Proxy An Nginx reverse proxy comes in use when you need to serve multiple local servers on different ports (remember the localhost:8080 ?). All you require is a small software called nginx. What will be covered here? Although the title talks about setting up a reverse proxy we will be doing that and along with that setting up Cloudflare DNS as well as Certbot certificate generation. Installations Installing Nginx Basic installation procedure just run the command Bash 1 sudo apt-get install nginx After installing Nginx just run Bash 1 sudo systemctl start nginx This should start the Nginx server at port 80. Just input your machine's IP in your browser and a welcome message should be visible. Installing Certbot A controversial method yes, but the only method I found convenient was installing Certbot from here using snap . Alternate methods are present too and you are free to check them out! The link above should be self explanatory. Cloudflare DNS To setup up a Cloudflare DNS for your domain, ensure your domain is linked to your Cloudflare account. This can be done by \"verifying\" you are the owner of your domain. Once that is done just head over to the DNS section as shown below. Add a record and make it A or AAAA depending on what IP address you want to use. A is for IPV4 and AAAA is for IPV6. The IP address is your server IP address which your web servers/applications are hosted on. If you do not want to use a DDNS service such as No-Ip you can refer this video which explains how to use Cloudflare's API and do it automatically. Nginx Configuration Here it is considered your certificate is ready, your DNS configured and you have Nginx installed. A quick check should reveal an existing folder - /etc/nginx/sites-enabled/ This folder is where all your configurations for the reverse proxy will be. Creating a configuration file Create a file in the folder mentioned above with an extension .conf . For example test.conf . Now all you need to do is copy paste this configuration - Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 server { listen 80; listen [::]:80; server_name test.your.domain; return 301 https://test.your.domain$request_uri; } server { listen 443 ssl; listen [::]:443 ssl; server_name test.your.domain; ssl_certificate /etc/letsencrypt/live/test.your.domain/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/test.your.domain/privkey.pem; ssl_trusted_certificate /etc/letsencrypt/live/test.your.domain/chain.pem; ssl_prefer_server_ciphers on; location / { proxy_http_version 1.1; proxy_pass http://127.0.0.1:3001/; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } } Some changes you should be making in the configuration file: test.your.domain should be substituted with your domain/subdomain name. The domain/subdomain you input here should be the same as inputted in the Cloudflare DNS section. Your ssl certificates generated by the Certbot should be in the given folder location. If not change in manually. If you have a website which accepts files (for example uploading of images and files) add this line - client_max_body_size 0; Inside location / substitute the domain in front of proxy_pass to your required domain and port. To conclude, the same steps can be repeated as many number of times you want to create configurations for different domains/subdomains. All you have to do is create a new conf file. \ud83d\udca1 Tips There is a really good tool provided by DigitalOcean for generating configuration files: Check it out If you have another service for example Pi-hole running on port 80 you should switch that over to another port (lighttpd configuration: /etc/lighttpd/lighttpd.conf ).","title":"Nginx Reverse Proxy"},{"location":"Hardware/Microprocessor/Raspberry%20Pi%203/Nginx-Reverse-Proxy/#nginx-reverse-proxy","text":"An Nginx reverse proxy comes in use when you need to serve multiple local servers on different ports (remember the localhost:8080 ?). All you require is a small software called nginx.","title":"Nginx Reverse Proxy"},{"location":"Hardware/Microprocessor/Raspberry%20Pi%203/Nginx-Reverse-Proxy/#what-will-be-covered-here","text":"Although the title talks about setting up a reverse proxy we will be doing that and along with that setting up Cloudflare DNS as well as Certbot certificate generation.","title":"What will be covered here?"},{"location":"Hardware/Microprocessor/Raspberry%20Pi%203/Nginx-Reverse-Proxy/#installations","text":"","title":"Installations"},{"location":"Hardware/Microprocessor/Raspberry%20Pi%203/Nginx-Reverse-Proxy/#installing-nginx","text":"Basic installation procedure just run the command Bash 1 sudo apt-get install nginx After installing Nginx just run Bash 1 sudo systemctl start nginx This should start the Nginx server at port 80. Just input your machine's IP in your browser and a welcome message should be visible.","title":"Installing Nginx"},{"location":"Hardware/Microprocessor/Raspberry%20Pi%203/Nginx-Reverse-Proxy/#installing-certbot","text":"A controversial method yes, but the only method I found convenient was installing Certbot from here using snap . Alternate methods are present too and you are free to check them out! The link above should be self explanatory.","title":"Installing Certbot"},{"location":"Hardware/Microprocessor/Raspberry%20Pi%203/Nginx-Reverse-Proxy/#cloudflare-dns","text":"To setup up a Cloudflare DNS for your domain, ensure your domain is linked to your Cloudflare account. This can be done by \"verifying\" you are the owner of your domain. Once that is done just head over to the DNS section as shown below. Add a record and make it A or AAAA depending on what IP address you want to use. A is for IPV4 and AAAA is for IPV6. The IP address is your server IP address which your web servers/applications are hosted on. If you do not want to use a DDNS service such as No-Ip you can refer this video which explains how to use Cloudflare's API and do it automatically.","title":"Cloudflare DNS"},{"location":"Hardware/Microprocessor/Raspberry%20Pi%203/Nginx-Reverse-Proxy/#nginx-configuration","text":"Here it is considered your certificate is ready, your DNS configured and you have Nginx installed. A quick check should reveal an existing folder - /etc/nginx/sites-enabled/ This folder is where all your configurations for the reverse proxy will be.","title":"Nginx Configuration"},{"location":"Hardware/Microprocessor/Raspberry%20Pi%203/Nginx-Reverse-Proxy/#creating-a-configuration-file","text":"Create a file in the folder mentioned above with an extension .conf . For example test.conf . Now all you need to do is copy paste this configuration - Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 server { listen 80; listen [::]:80; server_name test.your.domain; return 301 https://test.your.domain$request_uri; } server { listen 443 ssl; listen [::]:443 ssl; server_name test.your.domain; ssl_certificate /etc/letsencrypt/live/test.your.domain/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/test.your.domain/privkey.pem; ssl_trusted_certificate /etc/letsencrypt/live/test.your.domain/chain.pem; ssl_prefer_server_ciphers on; location / { proxy_http_version 1.1; proxy_pass http://127.0.0.1:3001/; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } } Some changes you should be making in the configuration file: test.your.domain should be substituted with your domain/subdomain name. The domain/subdomain you input here should be the same as inputted in the Cloudflare DNS section. Your ssl certificates generated by the Certbot should be in the given folder location. If not change in manually. If you have a website which accepts files (for example uploading of images and files) add this line - client_max_body_size 0; Inside location / substitute the domain in front of proxy_pass to your required domain and port. To conclude, the same steps can be repeated as many number of times you want to create configurations for different domains/subdomains. All you have to do is create a new conf file. \ud83d\udca1 Tips There is a really good tool provided by DigitalOcean for generating configuration files: Check it out If you have another service for example Pi-hole running on port 80 you should switch that over to another port (lighttpd configuration: /etc/lighttpd/lighttpd.conf ).","title":"Creating a configuration file"},{"location":"Hardware/Microprocessor/Raspberry%20Pi%203/Pi-hole/","text":"Pi-hole Using Raspberry Pi 3 A pi-hole is basically a black-hole for internet ads. The project is an open source ad blocking software at the DNS level. Installing Pi-hole The easiest way of installing Pi-hole is by running the following script Bash 1 curl -sSL https://install.pi-hole.net | bash The script will do everything to install the software and convert your Raspberry Pi into a pi-hole. Once done, you can open the web interface of the pi-hole. The web interface is simple to understand and easy to setup too. Finally before moving on we set the DNS of our router to the IP address of our pi-hole. Ad-lists To add lists apart from the one used at setup we go to Group Management > Adlists My preferred lists are - 1) Normal Hosts - https://v.firebog.net/hosts/static/w3kbl.txt 2) Adguard List - https://v.firebog.net/hosts/AdguardDNS.txt 3) EasyList - https://v.firebog.net/hosts/Easylist.txt 4) Privacy - https://v.firebog.net/hosts/Easyprivacy.txt 5) Windows Spyware - https://raw.githubusercontent.com/crazy-max/WindowsSpyBlocker/master/data/hosts/spy.txt 6) Anti-Malware List - https://raw.githubusercontent.com/DandelionSprout/adfilt/master/Alternate%20versions%20Anti-Malware%20List/AntiMalwareHosts.txt 7) Threat Intel by OSINT - https://osint.digitalside.it/Threat-Intel/lists/latestdomains.txt 8) Adult sites - https://blocklistproject.github.io/Lists/porn.txt You can add all this together by adding the URLs separated by space. After doing so make sure to update the Gravity list by running pihole -g command or by heading to Tools and Update Gravity . This downloads the list and updates it. DNS over HTTPS (DOH) To setup DNS over HTTPS on your pi-hole we use the docs given in the official website here . Note - Go with the manual method as the automatic did not work for me.","title":"Pi-hole with Raspberry Pi 3"},{"location":"Hardware/Microprocessor/Raspberry%20Pi%203/Pi-hole/#pi-hole-using-raspberry-pi-3","text":"A pi-hole is basically a black-hole for internet ads. The project is an open source ad blocking software at the DNS level.","title":"Pi-hole Using Raspberry Pi 3"},{"location":"Hardware/Microprocessor/Raspberry%20Pi%203/Pi-hole/#installing-pi-hole","text":"The easiest way of installing Pi-hole is by running the following script Bash 1 curl -sSL https://install.pi-hole.net | bash The script will do everything to install the software and convert your Raspberry Pi into a pi-hole. Once done, you can open the web interface of the pi-hole. The web interface is simple to understand and easy to setup too. Finally before moving on we set the DNS of our router to the IP address of our pi-hole.","title":"Installing Pi-hole"},{"location":"Hardware/Microprocessor/Raspberry%20Pi%203/Pi-hole/#ad-lists","text":"To add lists apart from the one used at setup we go to Group Management > Adlists My preferred lists are - 1) Normal Hosts - https://v.firebog.net/hosts/static/w3kbl.txt 2) Adguard List - https://v.firebog.net/hosts/AdguardDNS.txt 3) EasyList - https://v.firebog.net/hosts/Easylist.txt 4) Privacy - https://v.firebog.net/hosts/Easyprivacy.txt 5) Windows Spyware - https://raw.githubusercontent.com/crazy-max/WindowsSpyBlocker/master/data/hosts/spy.txt 6) Anti-Malware List - https://raw.githubusercontent.com/DandelionSprout/adfilt/master/Alternate%20versions%20Anti-Malware%20List/AntiMalwareHosts.txt 7) Threat Intel by OSINT - https://osint.digitalside.it/Threat-Intel/lists/latestdomains.txt 8) Adult sites - https://blocklistproject.github.io/Lists/porn.txt You can add all this together by adding the URLs separated by space. After doing so make sure to update the Gravity list by running pihole -g command or by heading to Tools and Update Gravity . This downloads the list and updates it.","title":"Ad-lists"},{"location":"Hardware/Microprocessor/Raspberry%20Pi%203/Pi-hole/#dns-over-https-doh","text":"To setup DNS over HTTPS on your pi-hole we use the docs given in the official website here . Note - Go with the manual method as the automatic did not work for me.","title":"DNS over HTTPS (DOH)"},{"location":"Hardware/Microprocessor/Raspberry%20Pi%203/PiVPN/","text":"PiVPN Setup PiVPN is a self hosted VPN service one can install on the Raspberry Pi. This service is light and serves both OpenVPN or Wireguard depending on the user's choice. This tutorial will show the steps in installing PiVPN with a Wireguard configuration. How is this different from any other tutorial? The initial setup is no different from all other references but here we use Wireguard along with IPv6 to setup the server. Most of the times one cannot get a static IPv4 address to setup a PiVPN, IPv6 fixes that issue for these cases as 99% of the time it remains static. Incase your ISP changes your IPv6, well, its time to switch to a different one. Yes some may say one can use a DDNS service but honestly its up-to you. My ISP did not allow me to port forward on my IPv4 address but IPv6 had no such restrictions. Hence this tutorial covers IPv6. Installing the software A small pre-requisite : Already have Pi-hole installed as you can pass all your queries through the Pi-hole. Instead of browser plugins or other software on each computer, install Pi-hole in one place and your entire network is protected. Once Pi-hole is setup all you have to do is run the script to install PiVPN Bash 1 curl -L https://install.pivpn.io | bash An automatic installation of PiVPN should take place and just go through with the installation GUI. There will be one part where you will be asked to input your static IPv4 address . In that just hit enter and move on, we will be making changes to that later! After it is installed, in your terminal with your favorite editor (nano or vim) edit the Wireguard configuration file - Bash 1 sudo nano /etc/pivpn/wireguard/setupVars.conf Your end result should be something like this - Bash 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 PLAT = Debian OSCN = bullseye USING_UFW = 0 IPv4dev = wlan0 IPv6dev = wlan0 install_user = root install_home = /home/root VPN = wireguard pivpnPORT = 51820 pivpnDNS1 = some.dns.com pivpnDNS2 = pivpnHOST = \"[YOUR IPV6 ADDRESS]\" INPUT_CHAIN_EDITED = 0 FORWARD_CHAIN_EDITED = 0 INPUT_CHAIN_EDITEDv6 = 0 FORWARD_CHAIN_EDITEDv6 = 0 pivpnPROTO = udp pivpnMTU = 1420 pivpnDEV = wg0 pivpnNET = 10 .53.171.0 subnetClass = 24 pivpnforceipv6route = 1 pivpnforceipv6 = 1 pivpnenableipv6 = 1 pivpnNETv6 = \"fd11:5ee:bad:c0de::\" subnetClassv6 = 64 ALLOWED_IPS = \"0.0.0.0/0, ::0/0\" UNATTUPG = 1 INSTALLED_PACKAGES =( grepcidr bsdmainutils iptables-persistent wireguard-tools qrencode unattended-upgrades ) A Few Tips In the above options put your IPV6 (in pivpnHOST ) inside the square brackets for it to work. The pivpnDNS1 should be automatically configured to your pi-hole address, if not, then manually configure it. Edit install_user and install_home to your user and home directory respectively. Mainly ensure pivpnforceipv6 and pivpnenableipv6 are set to 1. Now just run Bash 1 pivpn -add to add your client to the list of devices AND Bash 1 pivpn -qr To generate a QR code for mobile devices Your PiVPN should be good to go! Make sure to make changes to your UFW configurations to allow UDP traffic through the inputted port (by default is 51820).","title":"PiVPN - Raspberry Pi VPN"},{"location":"Hardware/Microprocessor/Raspberry%20Pi%203/PiVPN/#pivpn-setup","text":"PiVPN is a self hosted VPN service one can install on the Raspberry Pi. This service is light and serves both OpenVPN or Wireguard depending on the user's choice. This tutorial will show the steps in installing PiVPN with a Wireguard configuration.","title":"PiVPN Setup"},{"location":"Hardware/Microprocessor/Raspberry%20Pi%203/PiVPN/#how-is-this-different-from-any-other-tutorial","text":"The initial setup is no different from all other references but here we use Wireguard along with IPv6 to setup the server. Most of the times one cannot get a static IPv4 address to setup a PiVPN, IPv6 fixes that issue for these cases as 99% of the time it remains static. Incase your ISP changes your IPv6, well, its time to switch to a different one. Yes some may say one can use a DDNS service but honestly its up-to you. My ISP did not allow me to port forward on my IPv4 address but IPv6 had no such restrictions. Hence this tutorial covers IPv6.","title":"How is this different from any other tutorial?"},{"location":"Hardware/Microprocessor/Raspberry%20Pi%203/PiVPN/#installing-the-software","text":"A small pre-requisite : Already have Pi-hole installed as you can pass all your queries through the Pi-hole. Instead of browser plugins or other software on each computer, install Pi-hole in one place and your entire network is protected. Once Pi-hole is setup all you have to do is run the script to install PiVPN Bash 1 curl -L https://install.pivpn.io | bash An automatic installation of PiVPN should take place and just go through with the installation GUI. There will be one part where you will be asked to input your static IPv4 address . In that just hit enter and move on, we will be making changes to that later! After it is installed, in your terminal with your favorite editor (nano or vim) edit the Wireguard configuration file - Bash 1 sudo nano /etc/pivpn/wireguard/setupVars.conf Your end result should be something like this - Bash 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 PLAT = Debian OSCN = bullseye USING_UFW = 0 IPv4dev = wlan0 IPv6dev = wlan0 install_user = root install_home = /home/root VPN = wireguard pivpnPORT = 51820 pivpnDNS1 = some.dns.com pivpnDNS2 = pivpnHOST = \"[YOUR IPV6 ADDRESS]\" INPUT_CHAIN_EDITED = 0 FORWARD_CHAIN_EDITED = 0 INPUT_CHAIN_EDITEDv6 = 0 FORWARD_CHAIN_EDITEDv6 = 0 pivpnPROTO = udp pivpnMTU = 1420 pivpnDEV = wg0 pivpnNET = 10 .53.171.0 subnetClass = 24 pivpnforceipv6route = 1 pivpnforceipv6 = 1 pivpnenableipv6 = 1 pivpnNETv6 = \"fd11:5ee:bad:c0de::\" subnetClassv6 = 64 ALLOWED_IPS = \"0.0.0.0/0, ::0/0\" UNATTUPG = 1 INSTALLED_PACKAGES =( grepcidr bsdmainutils iptables-persistent wireguard-tools qrencode unattended-upgrades )","title":"Installing the software"},{"location":"Hardware/Microprocessor/Raspberry%20Pi%203/PiVPN/#a-few-tips","text":"In the above options put your IPV6 (in pivpnHOST ) inside the square brackets for it to work. The pivpnDNS1 should be automatically configured to your pi-hole address, if not, then manually configure it. Edit install_user and install_home to your user and home directory respectively. Mainly ensure pivpnforceipv6 and pivpnenableipv6 are set to 1. Now just run Bash 1 pivpn -add to add your client to the list of devices AND Bash 1 pivpn -qr To generate a QR code for mobile devices Your PiVPN should be good to go! Make sure to make changes to your UFW configurations to allow UDP traffic through the inputted port (by default is 51820).","title":"A Few Tips"},{"location":"Hardware/Microprocessor/Raspberry%20Pi%203/RaspberryPi-Dashboard/","text":"Monitoring Raspberry Pi With Dashboard One of the interesting things one can do with their RaspberryPi is setting up a monitoring dashboard. For this we use Grafana (a dashboard service), InfluxDB (the database) and collectd (a metric collection service). Updating and Upgrading Down to your basics, update and upgrade your system first Bash 1 sudo apt update && sudo apt upgrade InfluxDB Installing InfluxDB Bash 1 sudo apt install influxdb influxdb-client Fiddling with Configuration Bash 1 sudo nano /etc/influxdb/influxdb.conf The values of the directories are going to be changed to tmp so that values are stored in RAM. End result should look like this Text Only 1 2 3 4 5 6 7 8 [meta] dir = \"/tmp/influxdb/meta\" # ABRIDGED [data] dir = \"/tmp/influxdb/data\" wal-dir = \"/tmp/influxdb/wal\" Now we will bind our data to localhost only. Text Only 1 2 3 [http] enabled = true bind-address = \"127.0.0.1:8086\" Changing collectd configuration Text Only 1 2 3 4 5 [[collectd]] enabled = true port = 25826 database = \"collectd_db\" typesdb = \"/usr/share/collectd/types.db\" Done! Now we will run the following code to enable and start InfluxDB Bash 1 2 sudo systemctl enable influxdb sudo systemctl start influxdb If you now run influx in your terminal you should see it work! Run these commands SQL 1 2 CREATE DATABASE collectd_db CREATE RETENTION POLICY \"twentyfour_hours\" ON \"collectd_db\" DURATION 24 h REPLICATION 1 DEFAULT \" twentyfour_hours is the name of the policy, should you want to delete it later. the REPLICATION directive is only relevant for clustered systems but must be set nonetheless. Here, we only want one copy of our data. Press CTRL + D to exit the influx prompt, and start with the next step.\" collectd Installing collectd - Bash 1 sudo apt install collectd collectd-utils Once again, open the configuration file /etc/collectd/collectd.conf and ensure the following settings are not commented out: (Usually they aren't commented out but just check) Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 Hostname \"microserver314\" Interval 60 LoadPlugin syslog LoadPlugin cpu LoadPlugin cpufreq LoadPlugin df LoadPlugin disk LoadPlugin entropy LoadPlugin interface LoadPlugin irq LoadPlugin load LoadPlugin memory LoadPlugin network LoadPlugin processes LoadPlugin swap LoadPlugin thermal LoadPlugin users What does all this mean?? The individual plugin report: cpufreq: the CPU frequency df: available disk space entropy: available entropy for (pseudo) random number generation interface: transmitted and received bytes on the network interfaces irq: number of times the interrupt handler of the OS has been called load: CPU load averages memory: available and used main memory network: write data to network servers processes: number of processes and their state swap: size and usage of the swap partition thermal: CPU temperature users: number of logged in users (via SSH, \u2026) Now that the plugins are loaded, we must configure some of them individually: Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 <Plugin df> # This will ignore uninteresting file systems # to keep our DB from cluttering FSType rootfs FSType sysfs FSType proc FSType devpts FSType tmpfs FSType fusectl FSType cgroup Ignore Selected true </Plugin> <Plugin \"syslog\"> # Skip messages with info label LogLevel \"warning\" </Plugin> Finally, we must tell collectd where to write all the data. We will set it to the host and port of InfluxDB\u2019s collectd listener: Text Only 1 2 3 <Plugin \"network\"> Server \"127.0.0.1\" \"25826\" </Plugin> Finally making it work! Bash 1 2 sudo systemctl enable collectd sudo systemctl start collectd Testing The Data Bash 1 influxdb SQL 1 2 USE collectd_db SELECT * FROM processes_value WHERE ( \"type_instance\" = 'sleeping' ) ORDER BY time DESC LIMIT 1 If you get an output you are good to go! Grafana Finally we install the dashboard To add the Grafana APT key to your Raspberry Pi\u2019s keychain, run the following command Bash 1 curl https://packages.grafana.com/gpg.key | gpg --dearmor | sudo tee /usr/share/keyrings/grafana-archive-keyrings.gpg >/dev/null With the key added, we can now safely add the Grafana repository to our Pi\u2019s list of packages sources. Use the following command on your Raspberry Pi to add the repository to the list. Bash 1 echo \"deb [signed-by=/usr/share/keyrings/grafana-archive-keyrings.gpg] https://packages.grafana.com/oss/deb stable main\" | sudo tee /etc/apt/sources.list.d/grafana.list Finally updating our Pi Bash 1 sudo apt update And installing it Bash 1 sudo apt install grafana Enabling and starting the Grafana service Bash 1 2 sudo systemctl enable grafana-server sudo systemctl start grafana-server Now open Grafana using your host IP address and on port 3000 . The password and username for the dashboard is admin . Note - Do not like port 3000 or another service is utilizing it? Change the port in /etc/grafana/grafana.ini you have to change in /usr/share/grafana/conf/defaults.ini . Remove the semicolon in /usr/share/grafana/conf/defaults.ini and chance the port! You're good to go! Finally Open Grafana and if not prompted, head to settings (the gear icon) and click on Data Sources Add the data source as InfluxDB as given below Done! Now just save and test! If it works you are 95% done! Getting the beautiful output Head over to the + sign and Import this and you shall now be seeing an output!","title":"Grafana Dashboard Monitoring System"},{"location":"Hardware/Microprocessor/Raspberry%20Pi%203/RaspberryPi-Dashboard/#monitoring-raspberry-pi-with-dashboard","text":"One of the interesting things one can do with their RaspberryPi is setting up a monitoring dashboard. For this we use Grafana (a dashboard service), InfluxDB (the database) and collectd (a metric collection service).","title":"Monitoring Raspberry Pi With Dashboard"},{"location":"Hardware/Microprocessor/Raspberry%20Pi%203/RaspberryPi-Dashboard/#updating-and-upgrading","text":"Down to your basics, update and upgrade your system first Bash 1 sudo apt update && sudo apt upgrade","title":"Updating and Upgrading"},{"location":"Hardware/Microprocessor/Raspberry%20Pi%203/RaspberryPi-Dashboard/#influxdb","text":"Installing InfluxDB Bash 1 sudo apt install influxdb influxdb-client","title":"InfluxDB"},{"location":"Hardware/Microprocessor/Raspberry%20Pi%203/RaspberryPi-Dashboard/#fiddling-with-configuration","text":"Bash 1 sudo nano /etc/influxdb/influxdb.conf The values of the directories are going to be changed to tmp so that values are stored in RAM. End result should look like this Text Only 1 2 3 4 5 6 7 8 [meta] dir = \"/tmp/influxdb/meta\" # ABRIDGED [data] dir = \"/tmp/influxdb/data\" wal-dir = \"/tmp/influxdb/wal\" Now we will bind our data to localhost only. Text Only 1 2 3 [http] enabled = true bind-address = \"127.0.0.1:8086\" Changing collectd configuration Text Only 1 2 3 4 5 [[collectd]] enabled = true port = 25826 database = \"collectd_db\" typesdb = \"/usr/share/collectd/types.db\" Done! Now we will run the following code to enable and start InfluxDB Bash 1 2 sudo systemctl enable influxdb sudo systemctl start influxdb If you now run influx in your terminal you should see it work! Run these commands SQL 1 2 CREATE DATABASE collectd_db CREATE RETENTION POLICY \"twentyfour_hours\" ON \"collectd_db\" DURATION 24 h REPLICATION 1 DEFAULT \" twentyfour_hours is the name of the policy, should you want to delete it later. the REPLICATION directive is only relevant for clustered systems but must be set nonetheless. Here, we only want one copy of our data. Press CTRL + D to exit the influx prompt, and start with the next step.\"","title":"Fiddling with Configuration"},{"location":"Hardware/Microprocessor/Raspberry%20Pi%203/RaspberryPi-Dashboard/#collectd","text":"Installing collectd - Bash 1 sudo apt install collectd collectd-utils Once again, open the configuration file /etc/collectd/collectd.conf and ensure the following settings are not commented out: (Usually they aren't commented out but just check) Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 Hostname \"microserver314\" Interval 60 LoadPlugin syslog LoadPlugin cpu LoadPlugin cpufreq LoadPlugin df LoadPlugin disk LoadPlugin entropy LoadPlugin interface LoadPlugin irq LoadPlugin load LoadPlugin memory LoadPlugin network LoadPlugin processes LoadPlugin swap LoadPlugin thermal LoadPlugin users What does all this mean?? The individual plugin report: cpufreq: the CPU frequency df: available disk space entropy: available entropy for (pseudo) random number generation interface: transmitted and received bytes on the network interfaces irq: number of times the interrupt handler of the OS has been called load: CPU load averages memory: available and used main memory network: write data to network servers processes: number of processes and their state swap: size and usage of the swap partition thermal: CPU temperature users: number of logged in users (via SSH, \u2026) Now that the plugins are loaded, we must configure some of them individually: Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 <Plugin df> # This will ignore uninteresting file systems # to keep our DB from cluttering FSType rootfs FSType sysfs FSType proc FSType devpts FSType tmpfs FSType fusectl FSType cgroup Ignore Selected true </Plugin> <Plugin \"syslog\"> # Skip messages with info label LogLevel \"warning\" </Plugin> Finally, we must tell collectd where to write all the data. We will set it to the host and port of InfluxDB\u2019s collectd listener: Text Only 1 2 3 <Plugin \"network\"> Server \"127.0.0.1\" \"25826\" </Plugin> Finally making it work! Bash 1 2 sudo systemctl enable collectd sudo systemctl start collectd","title":"collectd"},{"location":"Hardware/Microprocessor/Raspberry%20Pi%203/RaspberryPi-Dashboard/#testing-the-data","text":"Bash 1 influxdb SQL 1 2 USE collectd_db SELECT * FROM processes_value WHERE ( \"type_instance\" = 'sleeping' ) ORDER BY time DESC LIMIT 1 If you get an output you are good to go!","title":"Testing The Data"},{"location":"Hardware/Microprocessor/Raspberry%20Pi%203/RaspberryPi-Dashboard/#grafana","text":"Finally we install the dashboard To add the Grafana APT key to your Raspberry Pi\u2019s keychain, run the following command Bash 1 curl https://packages.grafana.com/gpg.key | gpg --dearmor | sudo tee /usr/share/keyrings/grafana-archive-keyrings.gpg >/dev/null With the key added, we can now safely add the Grafana repository to our Pi\u2019s list of packages sources. Use the following command on your Raspberry Pi to add the repository to the list. Bash 1 echo \"deb [signed-by=/usr/share/keyrings/grafana-archive-keyrings.gpg] https://packages.grafana.com/oss/deb stable main\" | sudo tee /etc/apt/sources.list.d/grafana.list Finally updating our Pi Bash 1 sudo apt update And installing it Bash 1 sudo apt install grafana Enabling and starting the Grafana service Bash 1 2 sudo systemctl enable grafana-server sudo systemctl start grafana-server Now open Grafana using your host IP address and on port 3000 . The password and username for the dashboard is admin . Note - Do not like port 3000 or another service is utilizing it? Change the port in /etc/grafana/grafana.ini you have to change in /usr/share/grafana/conf/defaults.ini . Remove the semicolon in /usr/share/grafana/conf/defaults.ini and chance the port! You're good to go!","title":"Grafana"},{"location":"Hardware/Microprocessor/Raspberry%20Pi%203/RaspberryPi-Dashboard/#finally","text":"Open Grafana and if not prompted, head to settings (the gear icon) and click on Data Sources Add the data source as InfluxDB as given below Done! Now just save and test! If it works you are 95% done!","title":"Finally"},{"location":"Hardware/Microprocessor/Raspberry%20Pi%203/RaspberryPi-Dashboard/#getting-the-beautiful-output","text":"Head over to the + sign and Import this and you shall now be seeing an output!","title":"Getting the beautiful output"},{"location":"Hardware/Microprocessor/Raspberry%20Pi%203/Secure-Copy-SSH/","text":"Transferring Files Between A Device And Raspberry Pi To transfer files between the Raspberry Pi and the host device or vice versa we use a simple command called scp . Now I like to use a headless Raspbian OS without a GUI on the Raspberry Pi as it saves resources which would be otherwise spent unnecessarily. What is SCP? SCP short for Secure Copy uses SSH (secure shell) to transfer files between 2 devices. In my experience I hae tested this out with movies as big as 3GB. Although yes it does take some time it has been one of the easiest and convenient method for me! Syntax Bash 1 scp example.mp4 pi@192.168.1.1:/home/pi/Movies For downloading files from the other computer/server to the local machine Bash 1 scp username@192.168.1.1:path_to_file path_in_the_local_machine You have to replace example.mp4 with the file you intend to copy over, replace the pi@192.168.1.1 with your SSH address and /home/pi/Movies with the path you want your movie to be in. Additional Points 1) If you are sending a folder don't forget to add a -r (recursive tag) 2) You can send multiple files/folders just by adding them one after another (with space) after example.mp4","title":"Secure Copy over SSH"},{"location":"Hardware/Microprocessor/Raspberry%20Pi%203/Secure-Copy-SSH/#transferring-files-between-a-device-and-raspberry-pi","text":"To transfer files between the Raspberry Pi and the host device or vice versa we use a simple command called scp . Now I like to use a headless Raspbian OS without a GUI on the Raspberry Pi as it saves resources which would be otherwise spent unnecessarily.","title":"Transferring Files Between A Device And Raspberry Pi"},{"location":"Hardware/Microprocessor/Raspberry%20Pi%203/Secure-Copy-SSH/#what-is-scp","text":"SCP short for Secure Copy uses SSH (secure shell) to transfer files between 2 devices. In my experience I hae tested this out with movies as big as 3GB. Although yes it does take some time it has been one of the easiest and convenient method for me!","title":"What is SCP?"},{"location":"Hardware/Microprocessor/Raspberry%20Pi%203/Secure-Copy-SSH/#syntax","text":"Bash 1 scp example.mp4 pi@192.168.1.1:/home/pi/Movies For downloading files from the other computer/server to the local machine Bash 1 scp username@192.168.1.1:path_to_file path_in_the_local_machine You have to replace example.mp4 with the file you intend to copy over, replace the pi@192.168.1.1 with your SSH address and /home/pi/Movies with the path you want your movie to be in.","title":"Syntax"},{"location":"Hardware/Microprocessor/Raspberry%20Pi%203/Secure-Copy-SSH/#additional-points","text":"1) If you are sending a folder don't forget to add a -r (recursive tag) 2) You can send multiple files/folders just by adding them one after another (with space) after example.mp4","title":"Additional Points"},{"location":"Hardware/Microprocessor/Raspberry%20Pi%203/Systemd-Reboot/","text":"Running Scripts On Boot Sometimes one may wish to run scripts at boot. I looked at a lot of solutions including crontab but the only solution that worked for me was systemd . This can be done for all Linux systems but since I did this on the Raspberry Pi I have included it here. Getting started We will be creating a .service file in /usr/lib/systemd/system . This will be followed by sudo nano /etc/systemd/system/discord-webhook.service . In the file you will include the following lines of code Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 [Unit] Description=Discord Webhook IP sender [Install] WantedBy=multi-user.target [Service] ExecStart=python /bin/main.py Type=simple User=pi Group=pi WorkingDirectory=/bin Restart=on-failure Once done hit Ctrl+X followed by Y and Enter Before actually starting the service you may want to ensure that you have the main.py code. Here is the code (you may change it to your needs) Run this - sudo nano /bin/main.py Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import socket import requests import urllib.request webhookURL = '<webhook url>' hostname = socket . gethostname () external_ipv6 = urllib . request . urlopen ( 'https://v6.ident.me' ) . read () . decode ( 'utf8' ) external_ipv4 = urllib . request . urlopen ( 'https://v4.ident.me' ) . read () . decode ( 'utf8' ) data = { 'username' : 'Server IP Webhook' , 'embeds' : [{ 'title' : 'Server started!' , 'description' : hostname + ' \\n ' + 'IPV6' + ': ' + '`' + external_ipv6 + '`' + ' \\n\\n ' + 'IPV4 ' + ':' + '`' + external_ipv4 + '`' , }] } result = requests . post ( webhookURL , json = data ) try : result . raise_for_status () except : pass Run sudo systemctl daemon-reload Run sudo systemctl start discord-webhook.service (if there is an output then your code is functioning successfully!) Finally sudo systemctl enable discord-webhook.service And you're good to go! Your script will now run at startup! Credits - StackOverFlow","title":"Running Scripts On Boot Using Systemd"},{"location":"Hardware/Microprocessor/Raspberry%20Pi%203/Systemd-Reboot/#running-scripts-on-boot","text":"Sometimes one may wish to run scripts at boot. I looked at a lot of solutions including crontab but the only solution that worked for me was systemd . This can be done for all Linux systems but since I did this on the Raspberry Pi I have included it here.","title":"Running Scripts On Boot"},{"location":"Hardware/Microprocessor/Raspberry%20Pi%203/Systemd-Reboot/#getting-started","text":"We will be creating a .service file in /usr/lib/systemd/system . This will be followed by sudo nano /etc/systemd/system/discord-webhook.service . In the file you will include the following lines of code Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 [Unit] Description=Discord Webhook IP sender [Install] WantedBy=multi-user.target [Service] ExecStart=python /bin/main.py Type=simple User=pi Group=pi WorkingDirectory=/bin Restart=on-failure Once done hit Ctrl+X followed by Y and Enter Before actually starting the service you may want to ensure that you have the main.py code. Here is the code (you may change it to your needs) Run this - sudo nano /bin/main.py Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import socket import requests import urllib.request webhookURL = '<webhook url>' hostname = socket . gethostname () external_ipv6 = urllib . request . urlopen ( 'https://v6.ident.me' ) . read () . decode ( 'utf8' ) external_ipv4 = urllib . request . urlopen ( 'https://v4.ident.me' ) . read () . decode ( 'utf8' ) data = { 'username' : 'Server IP Webhook' , 'embeds' : [{ 'title' : 'Server started!' , 'description' : hostname + ' \\n ' + 'IPV6' + ': ' + '`' + external_ipv6 + '`' + ' \\n\\n ' + 'IPV4 ' + ':' + '`' + external_ipv4 + '`' , }] } result = requests . post ( webhookURL , json = data ) try : result . raise_for_status () except : pass Run sudo systemctl daemon-reload Run sudo systemctl start discord-webhook.service (if there is an output then your code is functioning successfully!) Finally sudo systemctl enable discord-webhook.service And you're good to go! Your script will now run at startup! Credits - StackOverFlow","title":"Getting started"},{"location":"Linux/daemons/","text":"Daemons There's a saying - 'The devil is at his strongest while we're looking the other way.' Like a program running in the background silently. While we're busy doing other shit. 'Daemons,' they call them. They perform action without user interaction. Monitoring, logging, notifications.... - Elliot Alderson What Are Daemons? Pronounced as day-mons . Daemons are processes that run in the background. They are usually used to perform tasks that are not directly related to the user. For example, a daemon might be used to monitor a network connection and log the traffic. Identifying Your Daemons A simple way of identifying daemons on your linux system is to run the pstree command. Bash 1 pstree Summoning Your Daemons You can summon your daemons by running the service command. Bash 1 2 3 4 service <daemon> start service <daemon> stop service <daemon> restart service <daemon> status Want to spin up a daemon? Bash 1 2 3 4 sudo systemctl start <daemon> sudo systemctl stop <daemon> sudo systemctl restart <daemon> sudo systemctl status <daemon> Finally using systemd you can manage your daemons. A quick boot up daemon example has already been published by me here - Running Scripts On Boot . Final Thoughts A quick way to identify daemons even includes looking at the suffix of services. If it ends with a d it's a daemon. Examples: mysqld systemd httpd sshd","title":"Imagining Daemons"},{"location":"Linux/daemons/#daemons","text":"There's a saying - 'The devil is at his strongest while we're looking the other way.' Like a program running in the background silently. While we're busy doing other shit. 'Daemons,' they call them. They perform action without user interaction. Monitoring, logging, notifications.... - Elliot Alderson","title":"Daemons"},{"location":"Linux/daemons/#what-are-daemons","text":"Pronounced as day-mons . Daemons are processes that run in the background. They are usually used to perform tasks that are not directly related to the user. For example, a daemon might be used to monitor a network connection and log the traffic.","title":"What Are Daemons?"},{"location":"Linux/daemons/#identifying-your-daemons","text":"A simple way of identifying daemons on your linux system is to run the pstree command. Bash 1 pstree","title":"Identifying Your Daemons"},{"location":"Linux/daemons/#summoning-your-daemons","text":"You can summon your daemons by running the service command. Bash 1 2 3 4 service <daemon> start service <daemon> stop service <daemon> restart service <daemon> status Want to spin up a daemon? Bash 1 2 3 4 sudo systemctl start <daemon> sudo systemctl stop <daemon> sudo systemctl restart <daemon> sudo systemctl status <daemon> Finally using systemd you can manage your daemons. A quick boot up daemon example has already been published by me here - Running Scripts On Boot .","title":"Summoning Your Daemons"},{"location":"Linux/daemons/#final-thoughts","text":"A quick way to identify daemons even includes looking at the suffix of services. If it ends with a d it's a daemon. Examples: mysqld systemd httpd sshd","title":"Final Thoughts"},{"location":"Linux/elementaryos-setup/","text":"How to switch from Windows to ElementaryOS This tutorial gives you an insight into how I switched from Windows to ElementaryOS. Getting Started Ensure you download the .iso file from their website . Scroll down to the download section, if you wish to pay you can pay, else click on custom and enter the amount as 0. Once that is done the download will be initiated. The Installation The same instructions are mentioned on their installation guide over here . Be sure to check the specifications required for the USB flash drive as well as the system. Flashing Once the image file is downloaded Etcher does the magic. The process takes some time so hold tight. Booting The device used to install Elementary in my case was Dell hence on booting F12 was enough to enter Boot Mode. Once you are in boot mode the USB should be visible in the options on the left (varies per device). Click on it and voila! If you are booting from the EOS image for the first time let it run a file check. Once the check is done a basic setup screen will pop-up. Select the clear drive option and wait for some time. Optionally the demo mode can be tried on first to check how your device suits with EOS. After the initial setup is done and an account is setup you are ready to go!! NOW THE NEXT TIME YOU POWER ON YOUR DEVICE, IT SHOULD AUTOMATICALLY START EOS! (Side note - You can eject the USB and remove it now) Initial tips and tricks Firefox or your preferred browser can be installed from FlatHub . All major apps can be found there. The weird close and maximize button can be tweaked too using this Pantheon Tweaks package In settings I noticed the Location permission is on by default, one can fix that by switching it off. Desktop folders has an app called DesktopFolder which can usually be installed using the AppCentre but it has not been optimized for EOS6 hence a pull request fixing the error can be found in this pull request (as of October 2021). An Update So I removed ElementaryOS because it was giving me the following issues - Audio issues when connected without an external mic Battery drain even suspended aka put to sleep A little heating issue Slower boot (startup) when compared to Windows No audio compartmentalization, meaning audio from one app is not isolated, instead, that audio is even heard in the other app. These issues may seem trivial but it was like a needle that one cannot find in the middle of a very soft and comfortable bed. Hence ElementaryOS isn't an distro I would recommend for someone who has a laptop.","title":"Elementary OS Setup"},{"location":"Linux/elementaryos-setup/#how-to-switch-from-windows-to-elementaryos","text":"This tutorial gives you an insight into how I switched from Windows to ElementaryOS.","title":"How to switch from Windows to ElementaryOS"},{"location":"Linux/elementaryos-setup/#getting-started","text":"Ensure you download the .iso file from their website . Scroll down to the download section, if you wish to pay you can pay, else click on custom and enter the amount as 0. Once that is done the download will be initiated.","title":"Getting Started"},{"location":"Linux/elementaryos-setup/#the-installation","text":"The same instructions are mentioned on their installation guide over here . Be sure to check the specifications required for the USB flash drive as well as the system.","title":"The Installation"},{"location":"Linux/elementaryos-setup/#flashing","text":"Once the image file is downloaded Etcher does the magic. The process takes some time so hold tight.","title":"Flashing"},{"location":"Linux/elementaryos-setup/#booting","text":"The device used to install Elementary in my case was Dell hence on booting F12 was enough to enter Boot Mode. Once you are in boot mode the USB should be visible in the options on the left (varies per device). Click on it and voila! If you are booting from the EOS image for the first time let it run a file check. Once the check is done a basic setup screen will pop-up. Select the clear drive option and wait for some time. Optionally the demo mode can be tried on first to check how your device suits with EOS. After the initial setup is done and an account is setup you are ready to go!! NOW THE NEXT TIME YOU POWER ON YOUR DEVICE, IT SHOULD AUTOMATICALLY START EOS! (Side note - You can eject the USB and remove it now)","title":"Booting"},{"location":"Linux/elementaryos-setup/#initial-tips-and-tricks","text":"Firefox or your preferred browser can be installed from FlatHub . All major apps can be found there. The weird close and maximize button can be tweaked too using this Pantheon Tweaks package In settings I noticed the Location permission is on by default, one can fix that by switching it off. Desktop folders has an app called DesktopFolder which can usually be installed using the AppCentre but it has not been optimized for EOS6 hence a pull request fixing the error can be found in this pull request (as of October 2021).","title":"Initial tips and tricks"},{"location":"Linux/elementaryos-setup/#an-update","text":"So I removed ElementaryOS because it was giving me the following issues - Audio issues when connected without an external mic Battery drain even suspended aka put to sleep A little heating issue Slower boot (startup) when compared to Windows No audio compartmentalization, meaning audio from one app is not isolated, instead, that audio is even heard in the other app. These issues may seem trivial but it was like a needle that one cannot find in the middle of a very soft and comfortable bed. Hence ElementaryOS isn't an distro I would recommend for someone who has a laptop.","title":"An Update"},{"location":"Linux/linux-on-old-pc/","text":"Substituting Windows with Linux on an old PC I had an old PC (32-bit and 2GB RAM) which had Windows 7 on it. The PC was slow and used to take a lot of time to load anything that required some computational power. What Was The Idea? The idea was to replace Windows 7 with a more secure OS as upgrading the Windows version would have been difficult. Which OS? To select the OS at first I decided to go with Zorin lite which has 32 bit support. After flashing my USB and booting it up, everything functioned perfectly until the install button was clicked. After nearly 4 tries and even being connected on a reasonable 50Mbps speed the installation did not continue and the installer always got hung at the Install updates while installing Zorin screen. This led me to finally conclude that Zorin OS may not be compatible with the PC I have. After a little research and finding I struck gold when I found a good alternative to the Windows 7 environment - Q4OS . At first I was skeptical about this too but it worked wonders. About Q4OS's Installation Process It started with a blank blue screen which did scare me at first. Later the installation had 2 options Manual and Automatic . As I always have believed that manual is always preferable as one gets to chose what they require and don't require. After selecting manual, a few more steps later and after around 10 minutes I managed to clean the disk that had Windows on it and substitute it with Q4OS. There would be some issues during the installation for example the screen may just get frozen at a blue screen but after a few minutes the installation resumes normally. Conclusion In conclusion Q4OS is a good alternative for PC's that cannot run Windows higher than 7. This OS can be used to bring old PC's back to life. Lastly Q4OS is an operating system based on Debian.","title":"Hello Linux, Goodbye Windows"},{"location":"Linux/linux-on-old-pc/#substituting-windows-with-linux-on-an-old-pc","text":"I had an old PC (32-bit and 2GB RAM) which had Windows 7 on it. The PC was slow and used to take a lot of time to load anything that required some computational power.","title":"Substituting Windows with Linux on an old PC"},{"location":"Linux/linux-on-old-pc/#what-was-the-idea","text":"The idea was to replace Windows 7 with a more secure OS as upgrading the Windows version would have been difficult.","title":"What Was The Idea?"},{"location":"Linux/linux-on-old-pc/#which-os","text":"To select the OS at first I decided to go with Zorin lite which has 32 bit support. After flashing my USB and booting it up, everything functioned perfectly until the install button was clicked. After nearly 4 tries and even being connected on a reasonable 50Mbps speed the installation did not continue and the installer always got hung at the Install updates while installing Zorin screen. This led me to finally conclude that Zorin OS may not be compatible with the PC I have. After a little research and finding I struck gold when I found a good alternative to the Windows 7 environment - Q4OS . At first I was skeptical about this too but it worked wonders.","title":"Which OS?"},{"location":"Linux/linux-on-old-pc/#about-q4oss-installation-process","text":"It started with a blank blue screen which did scare me at first. Later the installation had 2 options Manual and Automatic . As I always have believed that manual is always preferable as one gets to chose what they require and don't require. After selecting manual, a few more steps later and after around 10 minutes I managed to clean the disk that had Windows on it and substitute it with Q4OS. There would be some issues during the installation for example the screen may just get frozen at a blue screen but after a few minutes the installation resumes normally.","title":"About Q4OS's Installation Process"},{"location":"Linux/linux-on-old-pc/#conclusion","text":"In conclusion Q4OS is a good alternative for PC's that cannot run Windows higher than 7. This OS can be used to bring old PC's back to life. Lastly Q4OS is an operating system based on Debian.","title":"Conclusion"},{"location":"Linux/setting-up-ubuntu/","text":"Setting Up Ubuntu This tutorial is made from what I learnt during my experience of setting up Ubuntu on my virtual machine as well as dual booting. If you are interested in knowing how to setup Ubuntu on VMware the tutorial is right under this paragraph. To setup for dual boot you'd find it below the VMware setup instructions. VMware Install the VMware Workstation first from the website (one can optionally get the keys from GitHub and get the Pro version for free). Download the Ubuntu iso (in my case Windows) on the host machine which can be found on the official Ubuntu site. Open VMware and create new VM followed by these steps: Will install OS later Linux - Ubuntu 64bit Name the VM whatever you like Give it at least 40GB and it stays in split Customize Hardware:- 4GB RAM minimum, Cores - 4, New CD/DVD => Select iso image, Finish Play VM => Software update download and install Install Ubuntu Minimal Install (If preferred you can go for the other one but I did not require that) Check the \"Install third party checkbox\" Erase and install Ubuntu (don't worry your data on your host PC will not be affected if this option is clicked) Rest steps are easy and configurable on your own. Let it install, it takes some time and on completion a success message is shown. Once that is done a prompt to restart the VM will be shown and you are done! To sync Ubuntu's calendar with your Google Calendar you can login with Google too! Some Fixes I had To Search For In the minimalist version the codecs for audio was missing so you have to install ffmpeg using sudo from the CLI. To activate the camera from VMware, when on full screen mode hover to the top and find the camera icon near the notes and right click on it. This will present a option to Enable the camera. Wait for some time and if it gives an error try again. On your second or third try it should work after giving a prompt. Use the update command to find for updates and upgrade to upgrade the packages. Dual Boot (Windows) Some pre-requisites for doing this include - A good USB flash drive (4 GB minimum to install) Balena Etcher installed on Windows The latest Ubuntu .iso file downloaded and ready Although the above method mentions Balena Etcher, I feel that should be substituted with Ventoy . Once you have the above mentioned items ready all you have to do is fire up Etcher with the USB plugged in to your device. Etcher will automatically detect your USB. On rare circumstances if Etcher does not detect your USB, you should check if the USB is being detected by your device first. A FLASH option should appear when everything is ready. Flashing takes some time and once done you are good to go! Head over to Windows and search for Disk Management and create a new partition to install Ubuntu in. A minimum of 40GB is recommended, although I had allocated 100GB. Note - The steps mentioned below are for Dell devices, your BIOS menu and settings may be different so do refer their documentations if the need be. Although the steps mentioned below shouldn't defer depending on device. The following steps have to be done in order to dual boot Ubuntu - Reboot your device and when it is just about to startup press F12 or whichever shortcut takes you into BIOS mode. Once into BIOS mode, in Boot Menu or in Boot Devices you will find your USB device name mentioned. Click on that and wait for the screen to load. Once the Ubuntu screen loads click on Install Ubuntu . Select Normal Installation and you can then optionally install third-party software for graphics etc. This step is the most important step of all. When the option of Installation Type is asked, click on Something else , find for your partition allocated for Ubuntu in the GUI. In the popup select Primary as the type of partition, set the use as Ext4 journaling file system and finally the mount point should be set as / . Verify if the Windows Boot Manager has the type efi and then go ahead and click on Install Now . The next few steps are self-explanatory and the installation should now take place. Now on rebooting your device you shall notice that a bootloader called GRUB starts up. On selecting Ubuntu , Ubuntu shall load and on selecting Windows Boot Manager Windows will load. Issues Faced In Dual Boot One major issue faced when installing Ubuntu on Dell was that I had to turn off RST. This article provides a great solution to fix the issue. However if you lazy to read the article here are the steps to fix the issue - Open CMD in Windows ( Run as administrator ) and type in bcdedit /set {current} safeboot minimal Go into BIOS setup and search for SATA mode and change the current setting from whatever it was to AHCI . A frightening question can be asked: All existing data stored on the drives will be erased when resetting the controller mode. Do you want to proceed? [Yes] [No] just click on Yes without worrying. Press F10 and it will save and exit from BIOS Setup . The computer will startup in safe boot mode . Open CMD and type the following - bcdedit /deletevalue {current} safeboot And done! Your Ubuntu should start without any issues now! Personal Setup Spotify without ads :) Grub themes. KDE Connect to connect it with your phone. Gnome Tweaks","title":"Ubuntu Setup and Configuration"},{"location":"Linux/setting-up-ubuntu/#setting-up-ubuntu","text":"This tutorial is made from what I learnt during my experience of setting up Ubuntu on my virtual machine as well as dual booting. If you are interested in knowing how to setup Ubuntu on VMware the tutorial is right under this paragraph. To setup for dual boot you'd find it below the VMware setup instructions.","title":"Setting Up Ubuntu"},{"location":"Linux/setting-up-ubuntu/#vmware","text":"Install the VMware Workstation first from the website (one can optionally get the keys from GitHub and get the Pro version for free). Download the Ubuntu iso (in my case Windows) on the host machine which can be found on the official Ubuntu site. Open VMware and create new VM followed by these steps: Will install OS later Linux - Ubuntu 64bit Name the VM whatever you like Give it at least 40GB and it stays in split Customize Hardware:- 4GB RAM minimum, Cores - 4, New CD/DVD => Select iso image, Finish Play VM => Software update download and install Install Ubuntu Minimal Install (If preferred you can go for the other one but I did not require that) Check the \"Install third party checkbox\" Erase and install Ubuntu (don't worry your data on your host PC will not be affected if this option is clicked) Rest steps are easy and configurable on your own. Let it install, it takes some time and on completion a success message is shown. Once that is done a prompt to restart the VM will be shown and you are done! To sync Ubuntu's calendar with your Google Calendar you can login with Google too!","title":"VMware"},{"location":"Linux/setting-up-ubuntu/#some-fixes-i-had-to-search-for","text":"In the minimalist version the codecs for audio was missing so you have to install ffmpeg using sudo from the CLI. To activate the camera from VMware, when on full screen mode hover to the top and find the camera icon near the notes and right click on it. This will present a option to Enable the camera. Wait for some time and if it gives an error try again. On your second or third try it should work after giving a prompt. Use the update command to find for updates and upgrade to upgrade the packages.","title":"Some Fixes I had To Search For"},{"location":"Linux/setting-up-ubuntu/#dual-boot-windows","text":"Some pre-requisites for doing this include - A good USB flash drive (4 GB minimum to install) Balena Etcher installed on Windows The latest Ubuntu .iso file downloaded and ready Although the above method mentions Balena Etcher, I feel that should be substituted with Ventoy . Once you have the above mentioned items ready all you have to do is fire up Etcher with the USB plugged in to your device. Etcher will automatically detect your USB. On rare circumstances if Etcher does not detect your USB, you should check if the USB is being detected by your device first. A FLASH option should appear when everything is ready. Flashing takes some time and once done you are good to go! Head over to Windows and search for Disk Management and create a new partition to install Ubuntu in. A minimum of 40GB is recommended, although I had allocated 100GB. Note - The steps mentioned below are for Dell devices, your BIOS menu and settings may be different so do refer their documentations if the need be. Although the steps mentioned below shouldn't defer depending on device. The following steps have to be done in order to dual boot Ubuntu - Reboot your device and when it is just about to startup press F12 or whichever shortcut takes you into BIOS mode. Once into BIOS mode, in Boot Menu or in Boot Devices you will find your USB device name mentioned. Click on that and wait for the screen to load. Once the Ubuntu screen loads click on Install Ubuntu . Select Normal Installation and you can then optionally install third-party software for graphics etc. This step is the most important step of all. When the option of Installation Type is asked, click on Something else , find for your partition allocated for Ubuntu in the GUI. In the popup select Primary as the type of partition, set the use as Ext4 journaling file system and finally the mount point should be set as / . Verify if the Windows Boot Manager has the type efi and then go ahead and click on Install Now . The next few steps are self-explanatory and the installation should now take place. Now on rebooting your device you shall notice that a bootloader called GRUB starts up. On selecting Ubuntu , Ubuntu shall load and on selecting Windows Boot Manager Windows will load.","title":"Dual Boot (Windows)"},{"location":"Linux/setting-up-ubuntu/#issues-faced-in-dual-boot","text":"One major issue faced when installing Ubuntu on Dell was that I had to turn off RST. This article provides a great solution to fix the issue. However if you lazy to read the article here are the steps to fix the issue - Open CMD in Windows ( Run as administrator ) and type in bcdedit /set {current} safeboot minimal Go into BIOS setup and search for SATA mode and change the current setting from whatever it was to AHCI . A frightening question can be asked: All existing data stored on the drives will be erased when resetting the controller mode. Do you want to proceed? [Yes] [No] just click on Yes without worrying. Press F10 and it will save and exit from BIOS Setup . The computer will startup in safe boot mode . Open CMD and type the following - bcdedit /deletevalue {current} safeboot And done! Your Ubuntu should start without any issues now!","title":"Issues Faced In Dual Boot"},{"location":"Linux/setting-up-ubuntu/#personal-setup","text":"Spotify without ads :) Grub themes. KDE Connect to connect it with your phone. Gnome Tweaks","title":"Personal Setup"},{"location":"Linux/spotify-adblock/","text":"Spotify Adblock for Linux Spotify's ad blocking version is available all the way from Android to Windows but for Linux a special repository exists just for this purpose. Pre-requisites Install Spotify for your Linux distro by going to the official site of Spotify and not installing the package using Snap but using the Debian package installation. Download Git from here . Make may already be installed on your device but you can install it using sudo apt-get install build-essential to be on the safe side. Install Rust using the following command - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh That's about it! Installation To finally install the adblocked version run the following commands on your terminal - Bash 1 2 3 git clone https://github.com/abba23/spotify-adblock.git cd spotify-adblock make Finally run - sudo make install To test if it works run this command - LD_PRELOAD=/usr/local/lib/spotify-adblock.so spotify This should now launch Spotify with the adblocked version! Creating a desktop file If you run Spotify installed by you, you will notice the ads aren't blocked unless you run the command above on the terminal. To solve this issue a small hack exists. Fire up your terminal and change your directory on the terminal - cd ~/.local/share/applications You now need to create a desktop file in order to get the application in your menu. Create the file and edit it by using - nano spotify-adblock.desktop In the editing space copy paste the following code: Text Only 1 2 3 4 5 6 7 8 9 10 11 [Desktop Entry] Type=Application Name=Spotify (adblock) GenericName=Music Player Icon=spotify-client TryExec=spotify Exec=env LD_PRELOAD=/usr/local/lib/spotify-adblock.so spotify %U Terminal=false MimeType=x-scheme-handler/spotify; Categories=Audio;Music;Player;AudioVideo; StartupWMClass=spotify Ctrl + X, Y and hit enter to exit and save the file! Done! Now head over to your application menu and you will be seeing a new desktop icon called Spotify (adblock) Caveats The app does not minimize to dock even if you enable the setting instead it will just shut down. Hence you will have to minimize it and keep it in your app tray. Apart from ad blocking this mod does not offer any other premium features like downloading. (unlimited skips are automatically enabled in this mod)","title":"Spotify AdBlock On Linux"},{"location":"Linux/spotify-adblock/#spotify-adblock-for-linux","text":"Spotify's ad blocking version is available all the way from Android to Windows but for Linux a special repository exists just for this purpose.","title":"Spotify Adblock for Linux"},{"location":"Linux/spotify-adblock/#pre-requisites","text":"Install Spotify for your Linux distro by going to the official site of Spotify and not installing the package using Snap but using the Debian package installation. Download Git from here . Make may already be installed on your device but you can install it using sudo apt-get install build-essential to be on the safe side. Install Rust using the following command - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh That's about it!","title":"Pre-requisites"},{"location":"Linux/spotify-adblock/#installation","text":"To finally install the adblocked version run the following commands on your terminal - Bash 1 2 3 git clone https://github.com/abba23/spotify-adblock.git cd spotify-adblock make Finally run - sudo make install To test if it works run this command - LD_PRELOAD=/usr/local/lib/spotify-adblock.so spotify This should now launch Spotify with the adblocked version!","title":"Installation"},{"location":"Linux/spotify-adblock/#creating-a-desktop-file","text":"If you run Spotify installed by you, you will notice the ads aren't blocked unless you run the command above on the terminal. To solve this issue a small hack exists. Fire up your terminal and change your directory on the terminal - cd ~/.local/share/applications You now need to create a desktop file in order to get the application in your menu. Create the file and edit it by using - nano spotify-adblock.desktop In the editing space copy paste the following code: Text Only 1 2 3 4 5 6 7 8 9 10 11 [Desktop Entry] Type=Application Name=Spotify (adblock) GenericName=Music Player Icon=spotify-client TryExec=spotify Exec=env LD_PRELOAD=/usr/local/lib/spotify-adblock.so spotify %U Terminal=false MimeType=x-scheme-handler/spotify; Categories=Audio;Music;Player;AudioVideo; StartupWMClass=spotify Ctrl + X, Y and hit enter to exit and save the file! Done! Now head over to your application menu and you will be seeing a new desktop icon called Spotify (adblock)","title":"Creating a desktop file"},{"location":"Linux/spotify-adblock/#caveats","text":"The app does not minimize to dock even if you enable the setting instead it will just shut down. Hence you will have to minimize it and keep it in your app tray. Apart from ad blocking this mod does not offer any other premium features like downloading. (unlimited skips are automatically enabled in this mod)","title":"Caveats"},{"location":"Linux/xilinx-setup-on-ubuntu/","text":"Xilinx Download And Setup In Ubuntu Xilinx has been one software used to program the FPGA board in Verilog. Currently (at the time of writing) quite funnily this software fails to install in Windows 11 and has some issues installing in Windows 10. Linux however does not fail us here. This tutorial has been picked up from this YouTube tutorial but with a few changes. First Step As of 2022 in April the latest version of Xilinx is 14.7. Head over here and click on 14.7, scroll down to the ISE Design Suite and install the Full Installer for Linux . A simple popup to sign-up/in will come up. Extract the contents After the download is complete extract the file using the following command - Bash 1 tar -xvf Xilinx_ISE_DS_Lin_14.7_1015_1.tar This extracts the whole tar file. Running The Setup To further setup the Xilinx software we run the following - Bash 1 sudo ./xsetup This will run the setup! Error fixing During this you may run into an issue which says libncurses.so.5: cannot open shared object file: No such file or directory . A fix to this is done by running Bash 1 sudo apt-get install libncurses5 Next Steps The next steps are intuitive and can easily be figured out by clicking Next Finally Running It Run this command first - Bash 1 source /opt/Xilinx/14.7/ISE_DS/settings64.sh and then just type Bash 1 ise in the command line. You are good to go! Error I faced The video mentioned above has a step involving adding the source.. command to .bashrc . This led to errors as well as problems on my bash terminal. So avoid it and follow the step mentioned above.","title":"Xilinx Setup on Ubuntu"},{"location":"Linux/xilinx-setup-on-ubuntu/#xilinx-download-and-setup-in-ubuntu","text":"Xilinx has been one software used to program the FPGA board in Verilog. Currently (at the time of writing) quite funnily this software fails to install in Windows 11 and has some issues installing in Windows 10. Linux however does not fail us here. This tutorial has been picked up from this YouTube tutorial but with a few changes.","title":"Xilinx Download And Setup In Ubuntu"},{"location":"Linux/xilinx-setup-on-ubuntu/#first-step","text":"As of 2022 in April the latest version of Xilinx is 14.7. Head over here and click on 14.7, scroll down to the ISE Design Suite and install the Full Installer for Linux . A simple popup to sign-up/in will come up.","title":"First Step"},{"location":"Linux/xilinx-setup-on-ubuntu/#extract-the-contents","text":"After the download is complete extract the file using the following command - Bash 1 tar -xvf Xilinx_ISE_DS_Lin_14.7_1015_1.tar This extracts the whole tar file.","title":"Extract the contents"},{"location":"Linux/xilinx-setup-on-ubuntu/#running-the-setup","text":"To further setup the Xilinx software we run the following - Bash 1 sudo ./xsetup This will run the setup!","title":"Running The Setup"},{"location":"Linux/xilinx-setup-on-ubuntu/#error-fixing","text":"During this you may run into an issue which says libncurses.so.5: cannot open shared object file: No such file or directory . A fix to this is done by running Bash 1 sudo apt-get install libncurses5","title":"Error fixing"},{"location":"Linux/xilinx-setup-on-ubuntu/#next-steps","text":"The next steps are intuitive and can easily be figured out by clicking Next","title":"Next Steps"},{"location":"Linux/xilinx-setup-on-ubuntu/#finally-running-it","text":"Run this command first - Bash 1 source /opt/Xilinx/14.7/ISE_DS/settings64.sh and then just type Bash 1 ise in the command line. You are good to go!","title":"Finally Running It"},{"location":"Linux/xilinx-setup-on-ubuntu/#error-i-faced","text":"The video mentioned above has a step involving adding the source.. command to .bashrc . This led to errors as well as problems on my bash terminal. So avoid it and follow the step mentioned above.","title":"Error I faced"},{"location":"Miscellaneous/mongodb-installation-on-linux/","text":"Installing MongoDB Community on Ubuntu A small guide to install MongoDB Community on Ubuntu. This guide was created after a minor inconvenience I faced to get the server up and running. Getting Started The starting few steps can be found here on their website Starting the mongodb server - Bash 1 sudo service mongod start Checking the status of the server - Bash 1 sudo systemctl status mongod Stopping the mongodb server - Bash 1 sudo service mongod stop Error faced On trying to get the server status I always got the following error - Active: failed (Result: exit-code) I tried all the troubleshooting guides until I stumbled on a StackOverflow answer detailing the solution to this Just do those two commands for temporary solution: Bash 1 2 sudo rm -rf /tmp/mongodb-27017.sock sudo service mongod start Cause of the error For details: That shall be fault due to user permissions in .sock file, You may have to change the owner to monogdb user. Bash 1 2 chown -R mongodb:mongodb /var/lib/mongodb chown mongodb:mongodb /tmp/mongodb-27017.sock Uninstall MongoDB completely Bash 1 2 3 4 sudo service mongod stop sudo apt-get purge mongodb-org* sudo rm -r /var/log/mongodb sudo rm -r /var/lib/mongodb","title":"MongoDB Installation on Linux"},{"location":"Miscellaneous/mongodb-installation-on-linux/#installing-mongodb-community-on-ubuntu","text":"A small guide to install MongoDB Community on Ubuntu. This guide was created after a minor inconvenience I faced to get the server up and running.","title":"Installing MongoDB Community on Ubuntu"},{"location":"Miscellaneous/mongodb-installation-on-linux/#getting-started","text":"The starting few steps can be found here on their website Starting the mongodb server - Bash 1 sudo service mongod start Checking the status of the server - Bash 1 sudo systemctl status mongod Stopping the mongodb server - Bash 1 sudo service mongod stop","title":"Getting Started"},{"location":"Miscellaneous/mongodb-installation-on-linux/#error-faced","text":"On trying to get the server status I always got the following error - Active: failed (Result: exit-code) I tried all the troubleshooting guides until I stumbled on a StackOverflow answer detailing the solution to this Just do those two commands for temporary solution: Bash 1 2 sudo rm -rf /tmp/mongodb-27017.sock sudo service mongod start","title":"Error faced"},{"location":"Miscellaneous/mongodb-installation-on-linux/#cause-of-the-error","text":"For details: That shall be fault due to user permissions in .sock file, You may have to change the owner to monogdb user. Bash 1 2 chown -R mongodb:mongodb /var/lib/mongodb chown mongodb:mongodb /tmp/mongodb-27017.sock","title":"Cause of the error"},{"location":"Miscellaneous/mongodb-installation-on-linux/#uninstall-mongodb-completely","text":"Bash 1 2 3 4 sudo service mongod stop sudo apt-get purge mongodb-org* sudo rm -r /var/log/mongodb sudo rm -r /var/lib/mongodb","title":"Uninstall MongoDB completely"},{"location":"Miscellaneous/mqtt-with-express/","text":"Using MQTT With Express.js This documentation covers what I had learnt while setting up MQTT with an Express server built using NodeJS. For this project we had written a script to detect a bot (hardware) and continuously track it using YOLO . Python Code The camera will keep detecting the bot and track it, when the bot reaches its sticker the camera should run a post request in Python. The script for the python script is as follows - Python 1 2 3 4 5 6 import requests endpoint = 'http://localhost:3000/send-mqtt' data = { 'message' : 'Right' } r = requests . post ( url = endpoint , data = data ) If one is connecting via another device they have to simply replace localhost with the IP address of the device the server is being run on. IP of the server can be found by typing in ipconfig in Windows and scrolling to the IPv4 section. Note - If the script gives an error saying the module requests is not found just run pip install requests . The Server The broker used for sending messages is mosquitto . The url is as follows: mqtt://test.mosquitto.org . The following server is open to anyone hence sensitive messages should be avoided. Using NodeJs The first steps involve installing Node itself from their website here . After Node is setup in a new folder run the following line of code: npm init Fill in all the details or just keep hitting enter till a package.json file is formed. Proceed to install the express, body-parser and mqtt packages by using the following command: npm i express body-parser mqtt If somehow this command fails install each separately in the following format: npm i <package name> Server Code JavaScript 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 var express = require ( \"express\" ); var bodyParser = require ( \"body-parser\" ); var app = express (); var mqttHandler = require ( \"./mqtt_handler\" ); app . use ( express . json ()); app . use ( express . urlencoded ({ extended : true })); var mqttClient = new mqttHandler (); mqttClient . connect (); // Routing app . post ( \"/send-mqtt\" , function ( req , res ) { mqttClient . sendMessage ( req . body . message ); res . status ( 200 ). send ( \"Message sent to mqtt\" ); }); var server = app . listen ( 3000 , function () { console . log ( \"App running on port.\" , server . address (). port ); }); MQTT Handler JavaScript 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 const mqtt = require ( \"mqtt\" ); class MqttHandler { constructor () { this . mqttClient = null ; this . host = \"mqtt://test.mosquitto.org\" ; this . username = \"YOUR_USER\" ; // mqtt credentials if these are needed to connect this . password = \"YOUR_PASSWORD\" ; } connect () { // Connect mqtt with credentials (in case of needed, otherwise we can omit 2nd param) this . mqttClient = mqtt . connect ( this . host ); // , { username: this.username, password: this.password } // Mqtt error calback this . mqttClient . on ( \"error\" , ( err ) => { console . log ( \"An error has occured: \" , err ); this . mqttClient . end (); }); // Connection on success this . mqttClient . on ( \"connect\" , () => { console . log ( `Mqtt client connected` ); }); // Mqtt subscriptions this . mqttClient . subscribe ( \"mytopic\" , { qos : 0 }); // Logging a message when it arives this . mqttClient . on ( \"message\" , function ( topic , message ) { if ( ! message . toString (). startsWith ( \"32333\" )) { console . log ( message . toString ()); } }); this . mqttClient . on ( \"close\" , () => { console . log ( `mqtt client disconnected` ); }); } // Sends a mqtt message to topic: mytopic sendMessage ( message ) { this . mqttClient . publish ( \"mytopic\" , message ); } } module . exports = MqttHandler ;","title":"MQTT with ExpressJs"},{"location":"Miscellaneous/mqtt-with-express/#using-mqtt-with-expressjs","text":"This documentation covers what I had learnt while setting up MQTT with an Express server built using NodeJS. For this project we had written a script to detect a bot (hardware) and continuously track it using YOLO .","title":"Using MQTT With Express.js"},{"location":"Miscellaneous/mqtt-with-express/#python-code","text":"The camera will keep detecting the bot and track it, when the bot reaches its sticker the camera should run a post request in Python. The script for the python script is as follows - Python 1 2 3 4 5 6 import requests endpoint = 'http://localhost:3000/send-mqtt' data = { 'message' : 'Right' } r = requests . post ( url = endpoint , data = data ) If one is connecting via another device they have to simply replace localhost with the IP address of the device the server is being run on. IP of the server can be found by typing in ipconfig in Windows and scrolling to the IPv4 section. Note - If the script gives an error saying the module requests is not found just run pip install requests .","title":"Python Code"},{"location":"Miscellaneous/mqtt-with-express/#the-server","text":"The broker used for sending messages is mosquitto . The url is as follows: mqtt://test.mosquitto.org . The following server is open to anyone hence sensitive messages should be avoided.","title":"The Server"},{"location":"Miscellaneous/mqtt-with-express/#using-nodejs","text":"The first steps involve installing Node itself from their website here . After Node is setup in a new folder run the following line of code: npm init Fill in all the details or just keep hitting enter till a package.json file is formed. Proceed to install the express, body-parser and mqtt packages by using the following command: npm i express body-parser mqtt If somehow this command fails install each separately in the following format: npm i <package name>","title":"Using NodeJs"},{"location":"Miscellaneous/mqtt-with-express/#server-code","text":"JavaScript 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 var express = require ( \"express\" ); var bodyParser = require ( \"body-parser\" ); var app = express (); var mqttHandler = require ( \"./mqtt_handler\" ); app . use ( express . json ()); app . use ( express . urlencoded ({ extended : true })); var mqttClient = new mqttHandler (); mqttClient . connect (); // Routing app . post ( \"/send-mqtt\" , function ( req , res ) { mqttClient . sendMessage ( req . body . message ); res . status ( 200 ). send ( \"Message sent to mqtt\" ); }); var server = app . listen ( 3000 , function () { console . log ( \"App running on port.\" , server . address (). port ); });","title":"Server Code"},{"location":"Miscellaneous/mqtt-with-express/#mqtt-handler","text":"JavaScript 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 const mqtt = require ( \"mqtt\" ); class MqttHandler { constructor () { this . mqttClient = null ; this . host = \"mqtt://test.mosquitto.org\" ; this . username = \"YOUR_USER\" ; // mqtt credentials if these are needed to connect this . password = \"YOUR_PASSWORD\" ; } connect () { // Connect mqtt with credentials (in case of needed, otherwise we can omit 2nd param) this . mqttClient = mqtt . connect ( this . host ); // , { username: this.username, password: this.password } // Mqtt error calback this . mqttClient . on ( \"error\" , ( err ) => { console . log ( \"An error has occured: \" , err ); this . mqttClient . end (); }); // Connection on success this . mqttClient . on ( \"connect\" , () => { console . log ( `Mqtt client connected` ); }); // Mqtt subscriptions this . mqttClient . subscribe ( \"mytopic\" , { qos : 0 }); // Logging a message when it arives this . mqttClient . on ( \"message\" , function ( topic , message ) { if ( ! message . toString (). startsWith ( \"32333\" )) { console . log ( message . toString ()); } }); this . mqttClient . on ( \"close\" , () => { console . log ( `mqtt client disconnected` ); }); } // Sends a mqtt message to topic: mytopic sendMessage ( message ) { this . mqttClient . publish ( \"mytopic\" , message ); } } module . exports = MqttHandler ;","title":"MQTT Handler"},{"location":"Miscellaneous/veracrypt/","text":"VeraCrypt (Cross-Platform) VeraCrypt is a free and open source encryption software. The software can create a virtual encrypted disk that works just like a regular disk but within a file. It can also encrypt a partition or the entire storage device with pre-boot authentication. Installation This software is available on Mac OSX, Linux and Windows. Just simply download the installation file from their official site . At the time of writing this was their official site. For Linux Since I used Ubuntu my guide will be based on Debian based systems. Just download the Debian/Ubuntu .deb package from the website. Run the command - Bash 1 sudo dpkg -i VeraCrypt_File_Name.deb Replace VeraCrypt_File_Name.deb with the name of your downloaded .deb file. For Windows A simple .exe installation will work like a charm. Setup Get your USB stick ready and plug it into your PC. Boot up VeraCrypt and click on the Create Volume option. Two options will load: 1) Create an encrypted file container : If this option is used VeraCrypt will create a file which will be used as a virtual mount point. A key point to remember here is that once a size is allocated to the file it cannot be increased nor decreased as opposed to the next option. 2) Create a non-system partition/drive : If this option is used VeraCrypt will encrypt your whole drive. The size of the drive is the size that will be available to you. VeraCrypt suggests option 1 but I would say go for 2 if you do not know how much content you plan to encrypt. In this guide we will be going ahead with option 2. \ud83d\udca1 Note - If you are interested in option 1: Check out this video. After selecting your encryption type, it is time to select volume type. The options here are quite understandable. Unless you are possessing very sensitive material and your life is at stake go for the Standard VeraCrypt Volume . After selecting your drive aka the USB stick mount location, there are 2 cases here: 1) Your USB stick may be having content already. 2) Your USB stick is empty. If your USB stick is empty no worries, in Volume Creation Mode select the Create encrypted volume and format it option. If your USB stick has content that you want then select the Encrypt partition in place option. In Encryption Options if you know what you are doing change it to your preference. I left it at the default options as that sufficed me. Volume Password should be something that is strong to avoid dictionary attacks. Usually a unique alphanumeric password should suffice. \ud83d\udca1 This is important , if you plan to use your USB stick cross-platform, which you will, it is important that in Format Options you should select NTFS. Users who encrypted their partition and did not format it may not get this option. Final steps After all of this is done you will get a interesting window called the Volume Format . This will ask you to shake your mouse till a particular bar is full. Once done a 'Format' option should be available. Click that and depending on the size of your drive and the speed it could take time. My 64GB USB stick took up-to an hour to encrypt. On a conclusive note to the setup I would like to say the Final steps for those who had content in their volume could be different nevertheless, it isn't rocket science to figure it out. General Use To now use your volume after it has been encrypted, ensure the device you want to use your volume on has VeraCrypt. Open VeraCrypt and click on Select Device and select the encrypted volume mount point. Select the slot you want it to mount on. On Linux it will show as 1 , 2 , 3 ...etc and on Windows it will show as A , B , C ...etc. Click on Mount after selecting the slot and enter your password. Done! Now just navigate to the mount spot and enjoy accessing your files like a normal volume. Once done click on Dismount . Videos Used As Reference: 1) How To Use VeraCrypt On Linux 2) Linux Tips - Encrypt USB Drive on Windows Linux and MacOS (VeraCrypt) 3) Hide & Encrypt Your Secret Files With VeraCrypt","title":"VeraCrypt - Encrypt Everything"},{"location":"Miscellaneous/veracrypt/#veracrypt-cross-platform","text":"VeraCrypt is a free and open source encryption software. The software can create a virtual encrypted disk that works just like a regular disk but within a file. It can also encrypt a partition or the entire storage device with pre-boot authentication.","title":"VeraCrypt (Cross-Platform)"},{"location":"Miscellaneous/veracrypt/#installation","text":"This software is available on Mac OSX, Linux and Windows. Just simply download the installation file from their official site . At the time of writing this was their official site.","title":"Installation"},{"location":"Miscellaneous/veracrypt/#for-linux","text":"Since I used Ubuntu my guide will be based on Debian based systems. Just download the Debian/Ubuntu .deb package from the website. Run the command - Bash 1 sudo dpkg -i VeraCrypt_File_Name.deb Replace VeraCrypt_File_Name.deb with the name of your downloaded .deb file.","title":"For Linux"},{"location":"Miscellaneous/veracrypt/#for-windows","text":"A simple .exe installation will work like a charm.","title":"For Windows"},{"location":"Miscellaneous/veracrypt/#setup","text":"Get your USB stick ready and plug it into your PC. Boot up VeraCrypt and click on the Create Volume option. Two options will load: 1) Create an encrypted file container : If this option is used VeraCrypt will create a file which will be used as a virtual mount point. A key point to remember here is that once a size is allocated to the file it cannot be increased nor decreased as opposed to the next option. 2) Create a non-system partition/drive : If this option is used VeraCrypt will encrypt your whole drive. The size of the drive is the size that will be available to you. VeraCrypt suggests option 1 but I would say go for 2 if you do not know how much content you plan to encrypt. In this guide we will be going ahead with option 2. \ud83d\udca1 Note - If you are interested in option 1: Check out this video. After selecting your encryption type, it is time to select volume type. The options here are quite understandable. Unless you are possessing very sensitive material and your life is at stake go for the Standard VeraCrypt Volume . After selecting your drive aka the USB stick mount location, there are 2 cases here: 1) Your USB stick may be having content already. 2) Your USB stick is empty. If your USB stick is empty no worries, in Volume Creation Mode select the Create encrypted volume and format it option. If your USB stick has content that you want then select the Encrypt partition in place option. In Encryption Options if you know what you are doing change it to your preference. I left it at the default options as that sufficed me. Volume Password should be something that is strong to avoid dictionary attacks. Usually a unique alphanumeric password should suffice. \ud83d\udca1 This is important , if you plan to use your USB stick cross-platform, which you will, it is important that in Format Options you should select NTFS. Users who encrypted their partition and did not format it may not get this option.","title":"Setup"},{"location":"Miscellaneous/veracrypt/#final-steps","text":"After all of this is done you will get a interesting window called the Volume Format . This will ask you to shake your mouse till a particular bar is full. Once done a 'Format' option should be available. Click that and depending on the size of your drive and the speed it could take time. My 64GB USB stick took up-to an hour to encrypt. On a conclusive note to the setup I would like to say the Final steps for those who had content in their volume could be different nevertheless, it isn't rocket science to figure it out.","title":"Final steps"},{"location":"Miscellaneous/veracrypt/#general-use","text":"To now use your volume after it has been encrypted, ensure the device you want to use your volume on has VeraCrypt. Open VeraCrypt and click on Select Device and select the encrypted volume mount point. Select the slot you want it to mount on. On Linux it will show as 1 , 2 , 3 ...etc and on Windows it will show as A , B , C ...etc. Click on Mount after selecting the slot and enter your password. Done! Now just navigate to the mount spot and enjoy accessing your files like a normal volume. Once done click on Dismount .","title":"General Use"},{"location":"Miscellaneous/veracrypt/#videos-used-as-reference","text":"1) How To Use VeraCrypt On Linux 2) Linux Tips - Encrypt USB Drive on Windows Linux and MacOS (VeraCrypt) 3) Hide & Encrypt Your Secret Files With VeraCrypt","title":"Videos Used As Reference:"},{"location":"Web%20Development/split-big-html-files/","text":"Splitting Big HTML Files React and many other frameworks have the ability to split big chunks of code into different files to make the work of the programmer easier. What if I tell you the same can be done for HTML static sites too? Getting Into It Mind you, I am not the author of this code but just for the sake of documenting everything new I find, I am writing this down. This code has been picked up from a StackOverflow thread (I do not have the link of the original thread but if I do come across it again I will make sure to link it) The code - JavaScript 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 function HTMLImporter () {} HTMLImporter . import = function ( url ) { var error , http_request , load , script ; script = document . currentScript || document . scripts [ document . scripts . length - 1 ]; load = function ( event ) { var attribute , index , index1 , new_script , old_script , scripts , wrapper ; wrapper = document . createElement ( \"div\" ); wrapper . innerHTML = this . responseText ; scripts = wrapper . getElementsByTagName ( \"SCRIPT\" ); for ( index = scripts . length - 1 ; index > - 1 ; -- index ) { old_script = scripts [ index ]; new_script = document . createElement ( \"script\" ); new_script . innerHTML = old_script . innerHTML ; for ( index1 = old_script . attributes . length - 1 ; index1 > - 1 ; -- index1 ) { attribute = old_script . attributes [ index1 ]; new_script . setAttribute ( attribute . name , attribute . value ); } old_script . parentNode . replaceChild ( new_script , old_script ); } while ( wrapper . firstChild ) { script . parentNode . insertBefore ( wrapper . removeChild ( wrapper . firstChild ), script ); } script . parentNode . removeChild ( script ); this . removeEventListener ( \"error\" , error ); this . removeEventListener ( \"load\" , load ); }; error = function ( event ) { this . removeEventListener ( \"error\" , error ); this . removeEventListener ( \"load\" , load ); alert ( \"there was an error!\" ); }; http_request = new XMLHttpRequest (); http_request . addEventListener ( \"error\" , error ); http_request . addEventListener ( \"load\" , load ); http_request . open ( \"GET\" , url ); http_request . send (); }; How to use it Import the code into your main HTML file by adding the whole JS code into a file and using the script tag to do so. Important - Add the import script at the top before you import your components After importing the importer code use the following to easily integrate the component into your file - JavaScript 1 < script > HTMLImporter . import ( \"./path/to/file\" ) < /script> That is it!! You can now split your HTML file into multiple files and yes this works for static websites too!","title":"Split Large HTML Files"},{"location":"Web%20Development/split-big-html-files/#splitting-big-html-files","text":"React and many other frameworks have the ability to split big chunks of code into different files to make the work of the programmer easier. What if I tell you the same can be done for HTML static sites too?","title":"Splitting Big HTML Files"},{"location":"Web%20Development/split-big-html-files/#getting-into-it","text":"Mind you, I am not the author of this code but just for the sake of documenting everything new I find, I am writing this down. This code has been picked up from a StackOverflow thread (I do not have the link of the original thread but if I do come across it again I will make sure to link it) The code - JavaScript 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 function HTMLImporter () {} HTMLImporter . import = function ( url ) { var error , http_request , load , script ; script = document . currentScript || document . scripts [ document . scripts . length - 1 ]; load = function ( event ) { var attribute , index , index1 , new_script , old_script , scripts , wrapper ; wrapper = document . createElement ( \"div\" ); wrapper . innerHTML = this . responseText ; scripts = wrapper . getElementsByTagName ( \"SCRIPT\" ); for ( index = scripts . length - 1 ; index > - 1 ; -- index ) { old_script = scripts [ index ]; new_script = document . createElement ( \"script\" ); new_script . innerHTML = old_script . innerHTML ; for ( index1 = old_script . attributes . length - 1 ; index1 > - 1 ; -- index1 ) { attribute = old_script . attributes [ index1 ]; new_script . setAttribute ( attribute . name , attribute . value ); } old_script . parentNode . replaceChild ( new_script , old_script ); } while ( wrapper . firstChild ) { script . parentNode . insertBefore ( wrapper . removeChild ( wrapper . firstChild ), script ); } script . parentNode . removeChild ( script ); this . removeEventListener ( \"error\" , error ); this . removeEventListener ( \"load\" , load ); }; error = function ( event ) { this . removeEventListener ( \"error\" , error ); this . removeEventListener ( \"load\" , load ); alert ( \"there was an error!\" ); }; http_request = new XMLHttpRequest (); http_request . addEventListener ( \"error\" , error ); http_request . addEventListener ( \"load\" , load ); http_request . open ( \"GET\" , url ); http_request . send (); };","title":"Getting Into It"},{"location":"Web%20Development/split-big-html-files/#how-to-use-it","text":"Import the code into your main HTML file by adding the whole JS code into a file and using the script tag to do so. Important - Add the import script at the top before you import your components After importing the importer code use the following to easily integrate the component into your file - JavaScript 1 < script > HTMLImporter . import ( \"./path/to/file\" ) < /script> That is it!! You can now split your HTML file into multiple files and yes this works for static websites too!","title":"How to use it"}]}